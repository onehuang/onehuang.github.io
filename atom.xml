<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Huangzb&#39;s Blog</title>
  
  <subtitle>今日事，今日毕</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onehuang.github.io/"/>
  <updated>2020-05-21T06:19:14.695Z</updated>
  <id>https://onehuang.github.io/</id>
  
  <author>
    <name>Marvin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java多线程并发变成</title>
    <link href="https://onehuang.github.io/2020/05/21/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%8F%98%E6%88%90/"/>
    <id>https://onehuang.github.io/2020/05/21/java/java多线程并发变成/</id>
    <published>2020-05-21T06:18:04.000Z</published>
    <updated>2020-05-21T06:19:14.695Z</updated>
    
    <content type="html"><![CDATA[<ol><li>AQS abstractQuenueSynchronizer</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;AQS abstractQuenueSynchronizer&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020-04-25-wine安装微信</title>
    <link href="https://onehuang.github.io/2020/04/25/linux/2020-04-25-wine%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1/"/>
    <id>https://onehuang.github.io/2020/04/25/linux/2020-04-25-wine安装微信/</id>
    <published>2020-04-25T03:27:29.000Z</published>
    <updated>2020-05-18T10:03:46.678Z</updated>
    
    <content type="html"><![CDATA[<p>【转载自：<a href="https://zhuanlan.zhihu.com/p/76331687" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/76331687</a>】</p><ul><li><p>安装步骤</p></li><li><ul><li>安装Wine 4.0 (不一定必须)</li><li>安装最新版的winetricks</li><li>配置Wine bottle</li><li>修改默认的.desktop链接</li><li>启动</li></ul></li><li><p>参考链接</p></li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="安装Wine-4-0-不一定必须"><a href="#安装Wine-4-0-不一定必须" class="headerlink" title="安装Wine 4.0 (不一定必须)"></a>安装Wine 4.0 (不一定必须)</h3><ul><li>卸载旧版的Wine</li></ul><p>如果当前的系统中已经安装有wine, 但版本不是4.0, 可以考虑先卸载再安装（否则可能提示无法安装4.0版本）。<br>卸载方式如下[4]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove wine</span><br></pre></td></tr></table></figure><p>相应若干后续的操作可以参考[4]中剩余的指令。</p><ul><li>安装4.0版wine</li></ul><p>根据系统版本选择相应的配置下载方式, [5],[6]分别给出了在Ubuntu 16.04/Linux Mint 18以及Ubuntu 18.04/Linux Mint 19的配置安装方式。基本流程一致:</p><blockquote><p>启用32位架构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br></pre></td></tr></table></figure><blockquote><p>下载并添加repository key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -</span><br></pre></td></tr></table></figure><blockquote><p>若提示<code>wget</code>未安装, 则通过以下命令安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install wget</span><br></pre></td></tr></table></figure><blockquote><p>添加Wine repository</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository &apos;deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main&apos;</span><br></pre></td></tr></table></figure><p>此处需要根据系统版本相应修改<code>xenial</code>, 例如我的系统是Linux Mint 18, 就无需修改, 其他系统可以相应根据系统名称修改。</p><blockquote><p>安装Wine</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install --install-recommends winehq-stable</span><br></pre></td></tr></table></figure><blockquote><p>确认安装成功</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wine --version</span><br><span class="line">wine-4.0</span><br></pre></td></tr></table></figure><h3 id="安装最新版的winetricks"><a href="#安装最新版的winetricks" class="headerlink" title="安装最新版的winetricks"></a>安装最新版的<code>winetricks</code></h3><p>微信的正常使用需要配置相应的依赖文件, 而依赖是通过<code>winetricks</code>安装的, 但是通过<code>apt-get install</code>按照的<code>winetricks</code>版本比较老, 提供的依赖可能有问题, 因此最好是安装最新的版本[3]。<br>安装方法如下:</p><blockquote><p>卸载已安装的旧版</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove winetricks</span><br></pre></td></tr></table></figure><blockquote><p>获取新版</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks</span><br></pre></td></tr></table></figure><blockquote><p>修改权限为可执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x winetricks</span><br></pre></td></tr></table></figure><blockquote><p>将可执行文件放置于terminal可调用的目录下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv -v winetricks /usr/local/bin</span><br></pre></td></tr></table></figure><h3 id="配置Wine-bottle"><a href="#配置Wine-bottle" class="headerlink" title="配置Wine bottle"></a>配置Wine bottle</h3><p><strong>这是关键一步</strong>。通过[2]这个视频学到了Wine的使用逻辑: 不同于将所有的东西都塞到默认的<code>.wine</code>文件夹下, 这个视频详细展示了如何构建一个wine bottle, 配置它, 再安装相应的windows应用程序。我理解wine bottle就和anaconda里的env, 或者是docker的一个image, 都是一个<strong>微型的隔离的</strong>虚拟机。你可以在wine bottle中单独配置相应的程序所需的依赖。这里我们只需要安装微信, 为了解决聊天框无法显示输入的问题, 需要配置相应的富文本dll文件[1]: <code>riched20.dll</code>（我还添加了<code>riched32.dll</code>）下面给出配置流程:</p><blockquote><p>创建并进入目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir Wine</span><br><span class="line">cd Wine</span><br></pre></td></tr></table></figure><blockquote><p>初始化wine bottle config</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINARCH=win32 WINEPREFIX=/home/frank/Wine/WeChat winecfg</span><br></pre></td></tr></table></figure><p>注意其中的几个关键点: <code>WINARCH=win32</code>是将架构配置为32位以便提供更好的兼容性, <code>WINEPREFIX</code>设置了相应bottle所在的目录, 我命名为<code>WeChat</code>, 最后是<code>winecfg</code>即启动wine的初始化设置。执行后会提示若干的<code>err</code>或<code>fixme</code>, 不用管, 直至弹出<code>winecfg</code>的界面, 4.0版本下默认是windows 7的配置, 保留默认设置即可。</p><blockquote><p>通过<code>winetricks</code>添加依赖项目</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINARCH=win32 WINEPREFIX=/home/frank/Wine/WeChat winetricks</span><br></pre></td></tr></table></figure><p>与以上命令类似, 只需要将<code>winecfg</code>替换为<code>winetricks</code>即可, 然后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择默认的Wine容器 -&gt; OK -&gt; 安装Windows DLL组件 -&gt; OK -&gt; 勾选riched20.dll（以及riched32.dll） -&gt; OK -&gt; 等待安装即可。</span><br></pre></td></tr></table></figure><blockquote><p>下载微信安装包</p></blockquote><p>直接在微信官网下载微信PC版安装包即可, 下载后将安装包置于<code>Wine/</code>下</p><blockquote><p>安装微信</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINARCH=win32 WINEPREFIX=/home/frank/Wine/WeChat wine WeChat_C1018.exe</span><br></pre></td></tr></table></figure><p>仍然与上述命令类似, 将<code>winecfg</code>改为<code>wine</code>, 然后接安装包的名称, 等待安装完毕即可, 该步骤与windows上安装没有区别。</p><h3 id="修改默认的-desktop链接"><a href="#修改默认的-desktop链接" class="headerlink" title="修改默认的.desktop链接"></a>修改默认的<code>.desktop</code>链接</h3><p>以上步骤执行完毕后在开始菜单, wine下将出现微信的图标, 桌面也会出现微信的快捷方式, 但是点击并没有微信窗口弹出。其原因在于链接地址有问题, 需要相应进行修改。修改方式如下:</p><blockquote><p>定位到相应的<code>.desktop</code>文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.local/share/applications/wine/Programs/微信/微信.desktop</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>.desktop</code>文件 用任意编辑器打开即可, 将<code>Exec=</code>这一行修改如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exec=env WINEPREFIX=&quot;/home/frank/Wine/WeChat&quot; /usr/bin/wine explorer /desktop=wechat, 1920x1080 &quot;/home/frank/Wine/WeChat/drive_c/Program Files/Tencent/WeChat/WeChat.exe&quot;</span><br></pre></td></tr></table></figure><p>其中几个关键词解释如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/wine: wine执行程序所在目录</span><br><span class="line">explorer: 启动窗口</span><br><span class="line">/desktop=wechat: 窗口名称</span><br><span class="line">, 1920x1080: 窗口分辨率</span><br><span class="line">&quot;/home/frank/Wine/WeChat/drive_c/Program Files/Tencent/WeChat/WeChat.exe&quot;: 微信执行程序所在的绝对路径</span><br></pre></td></tr></table></figure><p>修改后保存即可, 如此便可以从开始菜单, wine下的微信图标启动微信了！<br><strong>注</strong>:桌面快捷方式不会自动更新, 可以通过在开始菜单中右键微信添加到桌面更新之。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>参考链接</p><ol><li><a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/makefile/p/wine-life.html" target="_blank" rel="noopener">Linux下的wine生活(QQ/微信/Office)</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DRmOdA5GeSqs" target="_blank" rel="noopener">How to Install and Use Wine to Run Windows Applications on Linux</a></li><li><a href="https://link.zhihu.com/?target=https%3A//askubuntu.com/a/750333" target="_blank" rel="noopener">winetricks sha1sum mismatch rename and try again</a></li><li><a href="https://link.zhihu.com/?target=https%3A//askubuntu.com/a/126745" target="_blank" rel="noopener">How to remove wine completely</a></li><li><a href="https://link.zhihu.com/?target=https%3A//computingforgeeks.com/how-to-install-wine-4-on-ubuntu-16-04-18-10-linux-mint-18/" target="_blank" rel="noopener">How to Install Wine 4 on Ubuntu 16.04 / 18.10 / Linux Mint 18</a></li><li><a href="https://link.zhihu.com/?target=https%3A//computingforgeeks.com/how-to-install-wine-4-on-ubuntu-18-04-linux-mint-19/" target="_blank" rel="noopener">How to Install Wine 4 on Ubuntu 18.04 / Linux Mint 19</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【转载自：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/76331687&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/76331687&lt;/a&gt;】&lt;/p&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="ubuntu" scheme="https://onehuang.github.io/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="https://onehuang.github.io/tags/ubuntu/"/>
    
      <category term="常见问题" scheme="https://onehuang.github.io/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2019-12-23-Jmeter使用</title>
    <link href="https://onehuang.github.io/2019/12/23/2019-12-23-Jmeter%E4%BD%BF%E7%94%A8/"/>
    <id>https://onehuang.github.io/2019/12/23/2019-12-23-Jmeter使用/</id>
    <published>2019-12-23T09:43:34.000Z</published>
    <updated>2019-12-23T09:49:38.388Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>if或者while的条件语句</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;__groovy(<span class="string">"$&#123;ip&#125;"</span> == <span class="string">""</span>,)&#125; 或</span><br><span class="line">$&#123;__javaScript(“$&#123;id&#125;”==<span class="number">1</span>)&#125; 或</span><br><span class="line">$&#123;__jexl3(“$&#123;ip&#125;”!=<span class="string">""</span>)&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;if或者while的条件语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
      <category term="工具" scheme="https://onehuang.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2019-12-18-GIt技巧</title>
    <link href="https://onehuang.github.io/2019/12/18/2019-12-18-Git%E6%8A%80%E5%B7%A7/"/>
    <id>https://onehuang.github.io/2019/12/18/2019-12-18-Git技巧/</id>
    <published>2019-12-18T02:47:50.000Z</published>
    <updated>2019-12-18T02:46:07.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git只提交部分修改的文件"><a href="#git只提交部分修改的文件" class="headerlink" title="git只提交部分修改的文件"></a>git只提交部分修改的文件</h1><p>1、git status //查看修改文件状态</p><p>2、git add //将想要提交的文件add到本地库</p><p>4、git status //查看修改文件状态</p><p>3、git commit //提交add到本地库的文件</p><p>5、git stash //将其他修改文件</p><p>6、git pull origin dev //拉取远程代码合并到本地</p><p>7、git push 提交commit的文件</p><p>8、git stash pop //回复存储区的文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git只提交部分修改的文件&quot;&gt;&lt;a href=&quot;#git只提交部分修改的文件&quot; class=&quot;headerlink&quot; title=&quot;git只提交部分修改的文件&quot;&gt;&lt;/a&gt;git只提交部分修改的文件&lt;/h1&gt;&lt;p&gt;1、git status //查看修改文件状态&lt;/p
      
    
    </summary>
    
    
      <category term="git" scheme="https://onehuang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>2019-12-16-MySql分区</title>
    <link href="https://onehuang.github.io/2019/12/16/2019-12-16-MySql%E5%88%86%E5%8C%BA/"/>
    <id>https://onehuang.github.io/2019/12/16/2019-12-16-MySql分区/</id>
    <published>2019-12-16T11:47:50.000Z</published>
    <updated>2019-12-27T03:07:02.197Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>分区的优点</p><p>​    1，分区可以分在多个磁盘，存储更大一点</p><p>​    2，根据查找条件，也就是where后面的条件，查找只查找相应的分区不用全部查找了</p><p>​    3，进行大数据搜索时可以进行并行处理。</p><p>​    4，跨多个磁盘来分散数据查询，来获得更大的查询吞吐量</p></li><li><p>分区类型<br>range分区：基于一个给定的连续区间范围(区间要求连续并且不能重叠)，把数据分配到不同的分区<br>list分区：类似于range分区，区别在于list分区是居于枚举出的值列表分区，range是基于给定的连续区间范围分区<br>hash分区：基于给定的分区个数，把数据分配到不同的分区<br>key分区：类似于hash分区</p></li><li><p>查看分区信息</p><ol><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_schema, table_name, partition_name, table_rows, partition_expression <span class="keyword">from</span> information_schema.partitions <span class="keyword">where</span> table_schema = <span class="string">'test'</span> <span class="keyword">and</span>  table_name = <span class="string">'test_table'</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;分区的优点&lt;/p&gt;
&lt;p&gt;​    1，分区可以分在多个磁盘，存储更大一点&lt;/p&gt;
&lt;p&gt;​    2，根据查找条件，也就是where后面的条件，查找只查找相应的分区不用全部查找了&lt;/p&gt;
&lt;p&gt;​    3，进行大数据搜索时可以进行并行处理。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019-12-11-Quarzt使用</title>
    <link href="https://onehuang.github.io/2019/12/11/2019-12-11-Quarzt%E4%BD%BF%E7%94%A8/"/>
    <id>https://onehuang.github.io/2019/12/11/2019-12-11-Quarzt使用/</id>
    <published>2019-12-10T16:00:00.000Z</published>
    <updated>2019-12-11T06:13:51.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quartz-基本概念及原理-转载"><a href="#Quartz-基本概念及原理-转载" class="headerlink" title="Quartz 基本概念及原理(转载)"></a>Quartz 基本概念及原理(转载)</h2><h3 id="Quartz-Scheduler-开源框架"><a href="#Quartz-Scheduler-开源框架" class="headerlink" title="Quartz Scheduler 开源框架"></a>Quartz Scheduler 开源框架</h3><p>Quartz 是 OpenSymphony 开源组织在任务调度领域的一个开源项目，完全基于 Java 实现。该项目于 2009 年被 Terracotta 收购，目前是 Terracotta 旗下的一个项目。读者可以到 <a href="http://www.quartz-scheduler.org/站点下载" target="_blank" rel="noopener">http://www.quartz-scheduler.org/站点下载</a> Quartz 的发布版本及其源代码。笔者在产品开发中使用的是版本 1.8.4，因此本文内容基于该版本。本文不仅介绍如何应用 Quartz 进行开发，也对其内部实现原理作一定讲解。</p><p>作为一个优秀的开源调度框架，Quartz 具有以下特点：</p><ol><li>强大的调度功能，例如支持丰富多样的调度方法，可以满足各种常规及特殊需求；</li><li>灵活的应用方式，例如支持任务和调度的多种组合方式，支持调度数据的多种存储方式；</li><li>分布式和集群能力，Terracotta 收购后在原来功能基础上作了进一步提升。本文暂不讨论该部分内容</li></ol><p>另外，作为 Spring 默认的调度框架，Quartz 很容易与 Spring 集成实现灵活可配置的调度功能。</p><p>下面是本文中用到的一些专用词汇，在此声明：</p><ul><li><p><strong>scheduler：</strong></p><p>任务调度器</p></li><li><p><strong>trigger：</strong></p><p>触发器，用于定义任务调度时间规则</p></li><li><p><strong>job：</strong></p><p>任务，即被调度的任务</p></li><li><p><strong>misfire：</strong></p><p>错过的，指本来应该被执行但实际没有被执行的任务调度</p></li></ul><h3 id="Quartz-任务调度的基本实现原理"><a href="#Quartz-任务调度的基本实现原理" class="headerlink" title="Quartz 任务调度的基本实现原理"></a>Quartz 任务调度的基本实现原理</h3><p><strong>核心元素</strong></p><p>Quartz 任务调度的核心元素是 scheduler, trigger 和 job，其中 trigger 和 job 是任务调度的元数据， scheduler 是实际执行调度的控制器。</p><p>在 Quartz 中，trigger 是用于定义调度时间的元素，即按照什么时间规则去执行任务。Quartz 中主要提供了四种类型的 trigger：SimpleTrigger，CronTirgger，DateIntervalTrigger，和 NthIncludedDayTrigger。这四种 trigger 可以满足企业应用中的绝大部分需求。我们将在企业应用一节中进一步讨论四种 trigger 的功能。</p><p>在 Quartz 中，job 用于表示被调度的任务。主要有两种类型的 job：无状态的（stateless）和有状态的（stateful）。对于同一个 trigger 来说，有状态的 job 不能被并行执行，只有上一次触发的任务被执行完之后，才能触发下一次执行。Job 主要有两种属性：volatility 和 durability，其中 volatility 表示任务是否被持久化到数据库存储，而 durability 表示在没有 trigger 关联的时候任务是否被保留。两者都是在值为 true 的时候任务被持久化或保留。一个 job 可以被多个 trigger 关联，但是一个 trigger 只能关联一个 job。</p><p>在 Quartz 中， scheduler 由 scheduler 工厂创建：DirectSchedulerFactory 或者 StdSchedulerFactory。 第二种工厂 StdSchedulerFactory 使用较多，因为 DirectSchedulerFactory 使用起来不够方便，需要作许多详细的手工编码设置。 Scheduler 主要有三种：RemoteMBeanScheduler， RemoteScheduler 和 StdScheduler。本文以最常用的 StdScheduler 为例讲解。这也是笔者在项目中所使用的 scheduler 类。</p><p>Quartz 核心元素之间的关系如下图所示：</p><h5 id="图-1-Quartz-核心元素关系图"><a href="#图-1-Quartz-核心元素关系图" class="headerlink" title="图 1. Quartz 核心元素关系图"></a>图 1. Quartz 核心元素关系图</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image001.gif" alt="图 1. Quartz 核心元素关系图"></p><p><strong>线程视图</strong></p><p>在 Quartz 中，有两类线程，Scheduler 调度线程和任务执行线程，其中任务执行线程通常使用一个线程池维护一组线程。</p><h5 id="图-2-Quartz-线程视图"><a href="#图-2-Quartz-线程视图" class="headerlink" title="图 2. Quartz 线程视图"></a>图 2. Quartz 线程视图</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image002.gif" alt="图 2. Quartz 线程视图"></p><p>Scheduler 调度线程主要有两个： 执行常规调度的线程，和执行 misfired trigger 的线程。常规调度线程轮询存储的所有 trigger，如果有需要触发的 trigger，即到达了下一次触发的时间，则从任务执行线程池获取一个空闲线程，执行与该 trigger 关联的任务。Misfire 线程是扫描所有的 trigger，查看是否有 misfired trigger，如果有的话根据 misfire 的策略分别处理。下图描述了这两个线程的基本流程：</p><h5 id="图-3-Quartz-调度线程流程图"><a href="#图-3-Quartz-调度线程流程图" class="headerlink" title="图 3. Quartz 调度线程流程图"></a>图 3. Quartz 调度线程流程图</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image003.png" alt="图 3. Quartz 调度线程流程图"></p><p>关于 misfired trigger，我们在企业应用一节中将进一步描述。</p><p><strong>数据存储</strong></p><p>Quartz 中的 trigger 和 job 需要存储下来才能被使用。Quartz 中有两种存储方式：RAMJobStore, JobStoreSupport，其中 RAMJobStore 是将 trigger 和 job 存储在内存中，而 JobStoreSupport 是基于 jdbc 将 trigger 和 job 存储到数据库中。RAMJobStore 的存取速度非常快，但是由于其在系统被停止后所有的数据都会丢失，所以在通常应用中，都是使用 JobStoreSupport。</p><p>在 Quartz 中，JobStoreSupport 使用一个驱动代理来操作 trigger 和 job 的数据存储：StdJDBCDelegate。StdJDBCDelegate 实现了大部分基于标准 JDBC 的功能接口，但是对于各种数据库来说，需要根据其具体实现的特点做某些特殊处理，因此各种数据库需要扩展 StdJDBCDelegate 以实现这些特殊处理。Quartz 已经自带了一些数据库的扩展实现，可以直接使用，如下图所示：</p><h5 id="图-4-Quartz-数据库驱动代理"><a href="#图-4-Quartz-数据库驱动代理" class="headerlink" title="图 4. Quartz 数据库驱动代理"></a>图 4. Quartz 数据库驱动代理</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image004.png" alt="图 4. Quartz 数据库驱动代理"></p><p>作为嵌入式数据库的代表，Derby 近来非常流行。如果使用 Derby 数据库，可以使用上图中的 CloudscapeDelegate 作为 trigger 和 job 数据存储的代理类。</p><h2 id="基本开发流程及简单实例"><a href="#基本开发流程及简单实例" class="headerlink" title="基本开发流程及简单实例"></a>基本开发流程及简单实例</h2><p><strong>搭建开发环境</strong></p><p>利用 Quartz 进行开发相当简单，只需要将下载开发包中的 quartz-all-1.8.4.jar 加入到 classpath 即可。根据笔者的经验，对于任务调度功能比较复杂的企业级应用来说，最好在开发阶段将 Quartz 的源代码导入到开发环境中来。一方面可以通过阅读源码了解 Quartz 的实现机理，另一方面可以通过扩展或修改 Quartz 的一些类来实现某些 Quartz 尚不提供的功能。</p><h5 id="图-5-Quartz-实例工程及源码导入"><a href="#图-5-Quartz-实例工程及源码导入" class="headerlink" title="图 5. Quartz 实例工程及源码导入"></a>图 5. Quartz 实例工程及源码导入</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image005.png" alt="图 5. Quartz 实例工程及源码导入"></p><p>上图中左边是源码导入后的截图，其中 org.quartz.* 即为 quartz 的源码。导入源码后可能会有一些编译错误，通常出现在 org.quartz.ee.* 和 org.quartz.jobs.ee.* 包中。下载开发包中有一个 lib 目录，读者可以将该目录下的 jar 文件加入到编译环境。如果还有编译错误，读者可以参考上图中右侧的 jar 列表，到网上去搜索下载。</p><p>项目中 com.ibm.zxn.sample.quartz 是我们自己的类包，下面的实例中我们会用到它。</p><p><strong>一个简单实例</strong></p><p>Quartz 开发包中有一个 examples 目录，其中有 15 个基本实例。建议读者阅读并实践这些例子。本文这里只列举一个小的实例，介绍基本的开发方法。</p><ol><li><p>准备数据库和 Quartz 用的数据表</p><ol><li>本文使用 IBM DB2 数据库：将 jdbc 驱动程序 db2jcc.jar 加入到项目中；</li><li>在数据库中创建一个新库 QUARTZDB；</li><li>执行 /quartz-1.8.4/docs/dbTables/tables_db2_v8.sql，创建数据表；表建好后如下所示：</li></ol><h5 id="图-6-Quartz-数据表"><a href="#图-6-Quartz-数据表" class="headerlink" title="图 6. Quartz 数据表"></a>图 6. Quartz 数据表</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image006.png" alt="图 6. Quartz 数据表"></p></li><li><p>准备配置文件，加入到项目中</p><h5 id="图-7-实例配置文件"><a href="#图-7-实例配置文件" class="headerlink" title="图 7. 实例配置文件"></a>图 7. 实例配置文件</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image007.png" alt="图 7. 实例配置文件"></p></li><li><p>通过实现 job 接口定义我们自己的任务类，如下所示：</p><h5 id="图-8-定义任务类"><a href="#图-8-定义任务类" class="headerlink" title="图 8. 定义任务类"></a>图 8. 定义任务类</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image008.png" alt="图 8. 定义任务类"></p></li><li><p>然后，实现任务调度的主程序，如下所示：</p><p>本实例中，我们利用 DateIntervalTrigger 实现一个每两分钟执行一次的任务调度。</p><h5 id="图-9-实现主程序"><a href="#图-9-实现主程序" class="headerlink" title="图 9. 实现主程序"></a>图 9. 实现主程序</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image009.png" alt="图 9. 实现主程序"></p></li><li><p>完成后项目结构如下所示：</p><h5 id="图-10-实例项目结构图"><a href="#图-10-实例项目结构图" class="headerlink" title="图 10. 实例项目结构图"></a>图 10. 实例项目结构图</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image010.png" alt="图 10. 实例项目结构图"></p></li><li><p>运行程序，查看数据库表和运行结果</p><p>数据库中，QRTZ_TRIGGERS 表中添加了一条 trigger 记录，如下所示：</p><h5 id="图-11-QRTZ-TRIGGERS-表中的记录"><a href="#图-11-QRTZ-TRIGGERS-表中的记录" class="headerlink" title="图 11. QRTZ_TRIGGERS 表中的记录"></a>图 11. QRTZ_TRIGGERS 表中的记录</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image011.png" alt="图 11. QRTZ_TRIGGERS 表中的记录"></p><p>QRTZ_JOB_DETAILS 表中添加了一条 job 记录，如下所示：</p><h5 id="图-12-QRTZ-JOB-DETAILES-表中的记录"><a href="#图-12-QRTZ-JOB-DETAILES-表中的记录" class="headerlink" title="图 12. QRTZ_JOB_DETAILES 表中的记录"></a>图 12. QRTZ_JOB_DETAILES 表中的记录</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image012.png" alt="图 12. QRTZ_JOB_DETAILES 表中的记录"></p><p>从运行结果来看，任务每两分钟被执行一次：</p><h5 id="图-13-运行结果"><a href="#图-13-运行结果" class="headerlink" title="图 13. 运行结果"></a>图 13. 运行结果</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image013.png" alt="图 13. 运行结果"></p></li></ol><h2 id="企业级开发中的常见应用"><a href="#企业级开发中的常见应用" class="headerlink" title="企业级开发中的常见应用"></a>企业级开发中的常见应用</h2><p>在应用 Quartz 进行企业级的开发时，有一些问题会经常遇到。本节笔者根据自己在项目开发中的经验，介绍企业开发中常见的一些问题以及通常的解决办法。</p><h3 id="应用一：如何使用不同类型的-Trigger"><a href="#应用一：如何使用不同类型的-Trigger" class="headerlink" title="应用一：如何使用不同类型的 Trigger"></a>应用一：如何使用不同类型的 Trigger</h3><p>前面我们提到 Quartz 中四种类型的 Trigger：SimpleTrigger，CronTirgger，DateIntervalTrigger， 和 NthIncludedDayTrigger。</p><p>SimpleTrigger 一般用于实现每隔一定时间执行任务，以及重复多少次，如每 2 小时执行一次，重复执行 5 次。SimpleTrigger 内部实现机制是通过计算间隔时间来计算下次的执行时间，这就导致其不适合调度定时的任务。例如我们想每天的 1：00AM 执行任务，如果使用 SimpleTrigger 的话间隔时间就是一天。注意这里就会有一个问题，即当有 misfired 的任务并且恢复执行时，该执行时间是随机的（取决于何时执行 misfired 的任务，例如某天的 3：00PM）。这会导致之后每天的执行时间都会变成 3：00PM，而不是我们原来期望的 1：00AM。</p><p>CronTirgger 类似于 LINUX 上的任务调度命令 crontab，即利用一个包含 7 个字段的表达式来表示时间调度方式。例如，”0 15 10 * * ? *” 表示每天的 10：15AM 执行任务。对于涉及到星期和月份的调度，CronTirgger 是最适合的，甚至某些情况下是唯一选择。例如，”0 10 14 ? 3 WED” 表示三月份的每个星期三的下午 14：10PM 执行任务。读者可以在具体用到该 trigger 时再详细了解每个字段的含义。</p><p>DateIntervalTrigger 是 Quartz 1.7 之后的版本加入的，其最适合调度类似每 N（1, 2, 3…）小时，每 N 天，每 N 周等的任务。虽然 SimpleTrigger 也能实现类似的任务，但是 DateIntervalTrigger 不会受到我们上面说到的 misfired 任务的影响。另外，DateIntervalTrigger 也不会受到 DST（Daylight Saving Time， 即中国的夏令时）调整的影响。笔者就曾经因为该原因将项目中的 SimpleTrigger 改为了 DateIntervalTrigger，因为如果使用 SimpleTrigger，本来设定的调度时间就会由于 DST 的调整而提前或延迟一个小时，而 DateIntervalTrigger 不会受此影响。</p><p>NthIncludedDayTrigger 的用途比较简单明确，即用于每隔一个周期的第几天调度任务，例如，每个月的第 3 天执行指定的任务。</p><p>除了上面提到的 4 种 Trigger，Quartz 中还定义了一个 Calendar 类（注意，是 org.quartz.Calendar）。这个 Calendar 与 Trigger 一起使用，但是它们的作用相反，它是用于排除任务不被执行的情况。例如，按照 Trigger 的规则在 10 月 1 号需要执行任务，但是 Calendar 指定了 10 月 1 号是节日（国庆），所以任务在这一天将不会被执行。通常来说，Calendar 用于排除节假日的任务调度，从而使任务只在工作日执行。</p><h3 id="应用二：使用有状态（StatefulJob）还是无状态的任务（Job）"><a href="#应用二：使用有状态（StatefulJob）还是无状态的任务（Job）" class="headerlink" title="应用二：使用有状态（StatefulJob）还是无状态的任务（Job）"></a>应用二：使用有状态（StatefulJob）还是无状态的任务（Job）</h3><p>在 Quartz 中，Job 是一个接口，企业应用需要实现这个接口以定义自己的任务。基本来说，任务分为有状态和无状态两种。实现 Job 接口的任务缺省为无状态的。Quartz 中还有另外一个接口 StatefulJob。实现 StatefulJob 接口的任务为有状态的，上一节的简单实例中，我们定义的 SampleJob 就是实现了 StatefulJob 接口的有状态任务。下图列出了 Quartz 中 Job 接口的定义以及一些自带的实现类：</p><h5 id="图-14-Quartz-中-Job-接口定义"><a href="#图-14-Quartz-中-Job-接口定义" class="headerlink" title="图 14. Quartz 中 Job 接口定义"></a>图 14. Quartz 中 Job 接口定义</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image014.png" alt="图 14. Quartz 中 Job 接口定义"></p><p>无状态任务一般指可以并发的任务，即任务之间是独立的，不会互相干扰。例如我们定义一个 trigger，每 2 分钟执行一次，但是某些情况下一个任务可能需要 3 分钟才能执行完，这样，在上一个任务还处在执行状态时，下一次触发时间已经到了。对于无状态任务，只要触发时间到了就会被执行，因为几个相同任务可以并发执行。但是对有状态任务来说，是不能并发执行的，同一时间只能有一个任务在执行。</p><p>在笔者项目中，某些任务需要对数据库中的数据进行增删改处理。这些任务不能并发执行，否则会造成数据混乱。因此我们使用 StatefulJob 接口。现在回到上面的例子，任务每 2 分钟执行一次，若某次任务执行了 5 分钟才完成，Quartz 会怎么处理呢？按照 trigger 的规则，第 2 分钟和第 4 分钟分别会有一次预定的触发执行，但是由于是有状态任务，因此实际不会被触发。在第 5 分钟第一次任务执行完毕时，Quartz 会把第 2 和第 4 分钟的两次触发作为 misfired job 进行处理。对于 misfired job，Quartz 会查看其 misfire 策略是如何设定的，如果是立刻执行，则会马上启动一次执行，如果是等待下次执行，则会忽略错过的任务，而等待下次（即第 6 分钟）触发执行。</p><p>读者可以在自己的项目中体会两种任务的区别以及 Quartz 的处理方法，根据具体情况选择不同类型的任务。</p><h3 id="应用三：如何设置-Quartz-的线程池和并发任务"><a href="#应用三：如何设置-Quartz-的线程池和并发任务" class="headerlink" title="应用三：如何设置 Quartz 的线程池和并发任务"></a>应用三：如何设置 Quartz 的线程池和并发任务</h3><p>Quartz 中自带了一个线程池的实现：SimpleThreadPool。类如其名，这只是线程池的一个简单实现，没有提供动态自发调整等高级特性。Quartz 提供了一个配置参数：org.quartz.threadPool.threadCount，可以在初始化时设定线程池的线程数量，但是一次设定后不能再修改。假定这个数目是 10，则在并发任务达到 10 个以后，再有触发的任务就无法被执行了，只能等待有空闲线程的时候才能得到执行。因此有些 trigger 就可能被 misfire。但是必须指出一点，这个初始线程数并不是越大越好。当并发线程太多时，系统整体性能反而会下降，因为系统把很多时间花在了线程调度上。根据一般经验，这个值在 10 – 50 比较合适。</p><p>对于一些注重性能的线程池来说，会根据实际线程使用情况进行动态调整，例如初始线程数，最大线程数，空闲线程数等。读者在应用中，如果有更好的线程池，则可以在配置文件中通过下面参数替换 SimpleThreadPool：org.quartz.threadPool.class = myapp.GreatThreadPool。</p><h3 id="应用四：如何处理-Misfired-任务"><a href="#应用四：如何处理-Misfired-任务" class="headerlink" title="应用四：如何处理 Misfired 任务"></a>应用四：如何处理 Misfired 任务</h3><p>在 Quartz 应用中，misfired job 是经常遇到的情况。一般来说，下面这些原因可能造成 misfired job：</p><p>1）系统因为某些原因被重启。在系统关闭到重新启动之间的一段时间里，可能有些任务会</p><p>被 misfire；</p><p>2）Trigger 被暂停（suspend）的一段时间里，有些任务可能会被 misfire；</p><p>3）线程池中所有线程都被占用，导致任务无法被触发执行，造成 misfire；</p><p>4）有状态任务在下次触发时间到达时，上次执行还没有结束；</p><p>为了处理 misfired job，Quartz 中为 trigger 定义了处理策略，主要有下面两种：</p><p>MISFIRE_INSTRUCTION_FIRE_ONCE_NOW：针对 misfired job 马上执行一次；</p><p>MISFIRE_INSTRUCTION_DO_NOTHING：忽略 misfired job，等待下次触发；</p><p>建议读者在应用开发中，将该设置作为可配置选项，使得用户可以在使用过程中，针对已经添加的 tirgger 动态配置该选项。</p><h3 id="应用五：如何保留已经结束的-Trigger"><a href="#应用五：如何保留已经结束的-Trigger" class="headerlink" title="应用五：如何保留已经结束的 Trigger"></a>应用五：如何保留已经结束的 Trigger</h3><p>在 Quartz 中，一个 tirgger 在最后一次触发完成之后，会被自动删除。Quartz 默认不会保留已经结束的 trigger，如下面 Quartz 源代码所示：</p><h5 id="图-15-executionComplete-源码"><a href="#图-15-executionComplete-源码" class="headerlink" title="图 15. executionComplete( ) 源码"></a>图 15. executionComplete( ) 源码</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image015.png" alt="图 15. executionComplete( ) 源码"></p><p>但是在实际应用中，有些用户需要保留以前的 trigger，作为历史记录，或者作为以后创建其他 trigger 的依据。如何保留结束的 trigger 呢？</p><p>一个办法是应用开发者自己维护一份数据备份记录，并且与 Quartz 原表的记录保持一定的同步。这个办法实际操作起来比较繁琐，而且容易出错，不推荐使用。</p><p>另外一个办法是通过修改并重新编译 Quartz 的 trigger 类，修改其默认的行为。我们以 org.quartz.SimpleTrigger 为例，修改上面代码中 if (!mayFireAgain()) 部分的代码如下：</p><h5 id="图-16-修改-executionComplete-源码"><a href="#图-16-修改-executionComplete-源码" class="headerlink" title="图 16. 修改 executionComplete( ) 源码"></a>图 16. 修改 executionComplete( ) 源码</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image016.png" alt="图 16. 修改 executionComplete( ) 源码"></p><p>另外我们需要在 SimpleTrigger 中定义一个新的类属性：needRetain，如下所示：</p><h5 id="图-17-定义新属性-needRetain"><a href="#图-17-定义新属性-needRetain" class="headerlink" title="图 17. 定义新属性 needRetain"></a>图 17. 定义新属性 needRetain</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image017.png" alt="图 17. 定义新属性 needRetain"></p><p>在定义自己的 trigger 时，设置该属性，就可以选择是否在 trigger 结束时删除 trigger。如下代码所示：</p><h5 id="图-18-使用修改后的-SimpleTrigger"><a href="#图-18-使用修改后的-SimpleTrigger" class="headerlink" title="图 18. 使用修改后的 SimpleTrigger"></a>图 18. 使用修改后的 SimpleTrigger</h5><p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/image018.png" alt="图 18. 使用修改后的 SimpleTrigger"></p><p>有人可能会考虑通过定义一个新的类，然后继承 org.quartz.SimpleTrigger 类并覆盖 executionComplete( ) 方法来实现。但是这种方法是行不通的，因为 Quartz 内部在处理时会根据 trigger 的类型重新生成 SimpleTrigger 类的实例，而不是使用我们自己定义的类创建的实例。这一点应该是 Quartz 的一个小小的不足之处，因为它把扩展 trigger 的能力堵死了。好在 Quartz 是开源的，我们可以根据需要进行修改。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>作为当前颇具生命力的开源框架，Quartz 已经得到了广泛的应用。Quartz 的强大功能和应用灵活性，在企业应用中发挥了巨大的作用。本文描述了如何应用 Quartz 开发应用程序，并对企业应用中常见的问题及解决方案进行了讨论。</p><p>转自【<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/】" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-quartz/】</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quartz-基本概念及原理-转载&quot;&gt;&lt;a href=&quot;#Quartz-基本概念及原理-转载&quot; class=&quot;headerlink&quot; title=&quot;Quartz 基本概念及原理(转载)&quot;&gt;&lt;/a&gt;Quartz 基本概念及原理(转载)&lt;/h2&gt;&lt;h3 id=&quot;Qua
      
    
    </summary>
    
    
      <category term="任务调度" scheme="https://onehuang.github.io/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>2019-11-26-权限总结</title>
    <link href="https://onehuang.github.io/2019/11/26/2019-11-26-%E6%9D%83%E9%99%90%E6%80%BB%E7%BB%93/"/>
    <id>https://onehuang.github.io/2019/11/26/2019-11-26-权限总结/</id>
    <published>2019-11-26T08:15:45.000Z</published>
    <updated>2019-11-26T08:16:34.925Z</updated>
    
    <content type="html"><![CDATA[<p>=</p><p>参考资料</p><ol><li><p>理解OAuth 2.0</p><p> <a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;=&lt;/p&gt;
&lt;p&gt;参考资料&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;理解OAuth 2.0&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019-11-19-Mysql安装</title>
    <link href="https://onehuang.github.io/2019/11/19/2019-11-19-Mysql%E5%AE%89%E8%A3%85/"/>
    <id>https://onehuang.github.io/2019/11/19/2019-11-19-Mysql安装/</id>
    <published>2019-11-19T11:03:35.000Z</published>
    <updated>2019-11-19T12:38:44.542Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装教程<ol><li><a href="https://www.cnblogs.com/opsprobe/p/9126864.html" target="_blank" rel="noopener">https://www.cnblogs.com/opsprobe/p/9126864.html</a></li></ol></li><li>策略设置<ol><li><a href="https://blog.csdn.net/hello_world_qwp/article/details/79551789" target="_blank" rel="noopener">https://blog.csdn.net/hello_world_qwp/article/details/79551789</a></li></ol></li><li>修改密码<ol><li><a href="https://www.cnblogs.com/ioan/p/10614623.html" target="_blank" rel="noopener">https://www.cnblogs.com/ioan/p/10614623.html</a></li></ol></li><li>表明设置大小写不敏感<ol><li><a href="https://blog.csdn.net/ADVANCE_DJJ/article/details/62048706" target="_blank" rel="noopener">https://blog.csdn.net/ADVANCE_DJJ/article/details/62048706</a></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装教程&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/opsprobe/p/9126864.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/opspr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019-11-07-MySql常用技巧总结</title>
    <link href="https://onehuang.github.io/2019/11/07/mysql/2019-11-07-MySql%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>https://onehuang.github.io/2019/11/07/mysql/2019-11-07-MySql常用技巧总结/</id>
    <published>2019-11-07T07:45:02.000Z</published>
    <updated>2020-05-18T10:04:51.349Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><ol><li><code>mysql -h 127.0.0.1 -P3306 -uroot -ppassword</code></li></ol></li><li><h1 id="mysql-g和-G的作用"><a href="#mysql-g和-G的作用" class="headerlink" title="mysql-\g和\G的作用"></a>mysql-\g和\G的作用</h1><ol><li>\g 的作用是分号和在sql语句中写’;’是等效的;<br>\G 的作用是将查到的结构旋转90度变成纵向;</li></ol></li><li><h1 id="查看所有的数据库库"><a href="#查看所有的数据库库" class="headerlink" title="查看所有的数据库库"></a>查看所有的数据库库</h1><p><code>show databases;</code></p></li><li><h1 id="查看当前使用的数据库"><a href="#查看当前使用的数据库" class="headerlink" title="查看当前使用的数据库"></a>查看当前使用的数据库</h1><p><code>select database();</code></p></li><li><h1 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h1><p><code>select user();</code></p></li><li><h1 id="查看表列名"><a href="#查看表列名" class="headerlink" title="查看表列名"></a>查看表列名</h1><ol><li><code>desc table_name;</code></li></ol></li><li><h1 id="查看ddl语句"><a href="#查看ddl语句" class="headerlink" title="查看ddl语句"></a>查看ddl语句</h1><ol><li><code>show create table table_name;</code></li></ol></li><li><h1 id="查看数据库及表名字"><a href="#查看数据库及表名字" class="headerlink" title="查看数据库及表名字"></a>查看数据库及表名字</h1><ol><li><code>show databases;</code>   – 查询数据库</li><li><code>show databases like &#39;%y%&#39;;</code> – 模糊查询包含y的数据库</li><li><code>show tables;</code>– 查看表</li><li><code>show tables like &#39;%user%&#39;;</code>–模糊查询包含user的表</li></ol></li><li><h1 id="查看存储过程和函数的状态"><a href="#查看存储过程和函数的状态" class="headerlink" title="查看存储过程和函数的状态"></a>查看存储过程和函数的状态</h1><ol><li><code>SHOW  { PROCEDURE  |  FUNCTION  } STATUS  [ LIKE &#39;pattern&#39; ]\</code></li></ol></li><li><h1 id="查看存储过程和函数的定义"><a href="#查看存储过程和函数的定义" class="headerlink" title="查看存储过程和函数的定义"></a>查看存储过程和函数的定义</h1><ol><li><code>SHOW  CREATE  { PROCEDURE | FUNCTION } sp_name\</code></li></ol></li><li><h1 id="查看存储过程和函数的信息"><a href="#查看存储过程和函数的信息" class="headerlink" title="查看存储过程和函数的信息"></a>查看存储过程和函数的信息</h1><ol><li><code>SELECT  *  FROM   information_schema.Routines   WHERE   ROUTINE_NAME  =  &#39;t_func_replenishment_test&#39;;</code></li></ol></li><li><h1 id="Mysql数据库复制"><a href="#Mysql数据库复制" class="headerlink" title="Mysql数据库复制"></a>Mysql数据库复制</h1><p>将old数据库复制到new数据库</p><ol><li><p>创建新的数据库</p><p><code>mysql -u root -p123456</code></p><p><code>CREATE DATABASE `new` DEFAULT CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI;</code></p></li><li><p>使用mysqldump及mysql组合命令</p><ol><li><p>同一台mysql服务器</p><p><code>mysqldump old -u root -p123456 | mysql new -u root -p123456</code></p></li><li><p>不在同一个mysql服务器上</p><p><code>mysqldump old -uroot -p123456 | mysql -h 10.1.1.2 new -u root -p123456</code></p></li></ol></li><li><p>mysqldump的使用</p><ol><li>导出数据库所有库的表结构<br>mysqldump -uroot -proot -d –all-databases  &gt; fileName.sql</li><li>导出数据库某个库个所有表结构<br>mysqldump -uroot -proot -d dbname  &gt; fileName.sql</li><li>导出数据库某个库个所有表结构及数据<br>mysqldump -uroot -proot dbname  &gt; fileName.sql</li><li>导出数据库某个库个指定表的表结构及数据<br>mysqldump -uroot -proot dbname tab1 tab2 tab3 &gt; fileName.sql</li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h1 id=&quot;连接数据库&quot;&gt;&lt;a href=&quot;#连接数据库&quot; class=&quot;headerlink&quot; title=&quot;连接数据库&quot;&gt;&lt;/a&gt;连接数据库&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mysql -h 127.0.0.1 -P3306 -uroot -ppa
      
    
    </summary>
    
      <category term="database" scheme="https://onehuang.github.io/categories/database/"/>
    
    
      <category term="mysql" scheme="https://onehuang.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>2019-11-07-mysql执行计划</title>
    <link href="https://onehuang.github.io/2019/11/07/mysql/2019-11-07-mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    <id>https://onehuang.github.io/2019/11/07/mysql/2019-11-07-mysql执行计划/</id>
    <published>2019-11-07T03:08:57.000Z</published>
    <updated>2020-05-18T10:03:46.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MySQL 使用 <code>explain + sql 语句</code>查看 执行计划，该执行计划不一定完全正确但是可以参考。</p><p>查看分区表的执行计划 <code>EXPLAIN PARTITIONS + sql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from <span class="built_in">test</span>;</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table     | partitions | <span class="built_in">type</span> | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | t_consult | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   38 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span>, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>select_type</strong>:</p><table><thead><tr><th align="center"><strong><em>select_type</em></strong></th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">SIMPLE</td><td align="center">简单查询方式，不使用UNION跟子查询</td></tr><tr><td align="center">PRIMARY</td><td align="center">该表格位于最外层开始查询，通常会跟其他查询方式组合</td></tr><tr><td align="center">UNION</td><td align="center">UNION 第一个SELECT 为PRIMARY，第二个及之后的所有SELECT 为 UNION SELECT TYP</td></tr><tr><td align="center">UNION RESULT</td><td align="center">每个结果集的取出来后，会做合并操作，这个操作就是 UNION RESULT</td></tr><tr><td align="center">DEPENDENT UNION</td><td align="center">子查询中的UNION操作，从UNION 第二个及之后的所有SELECT语句的SELECT TYPE为 DEPENDENT UNION，这个一般跟DEPENDENT SUBQUERY一起结合应用，子查询中UNION 的第一个为DEPENDENT SUBQUERY</td></tr><tr><td align="center">DEPENDENT SUBQUERY</td><td align="center">子查询中内层的第一个SELECT，依赖于外部查询的结果集</td></tr><tr><td align="center">SUBQUERY</td><td align="center">子查询内层查询的第一个SELECT，结果不依赖于外部查询结果集（不会被数据库引擎改写的情况）</td></tr><tr><td align="center">DERIVED</td><td align="center">查询使用内联视图</td></tr><tr><td align="center">MATERIALIZED</td><td align="center">子查询物化，表出现在非相关子查询中 并且需要进行物化时会出现MATERIALIZED关键词</td></tr><tr><td align="center">UNCACHEABLE SUBQUERY</td><td align="center">结果集无法缓存的子查询，需要逐次查询</td></tr><tr><td align="center">UNCACHEABLE UNION</td><td align="center">表示子查询不可被物化 需要逐次运行</td></tr></tbody></table><hr><p><strong>table</strong> : 正在访问的表名</p><hr><p><strong>type</strong>:</p><table><thead><tr><th align="center">type</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL</td><td align="center">全数据表扫描</td></tr><tr><td align="center">index</td><td align="center">全索引表扫描</td></tr><tr><td align="center">RANGE</td><td align="center">对索引列进行范围查找</td></tr><tr><td align="center">INDEX_MERGE</td><td align="center">合并索引，使用多个单列索引搜索</td></tr><tr><td align="center">REF</td><td align="center">根据索引查找一个或多个值,Join 语句中被驱动表索引引用查询</td></tr><tr><td align="center">EQ_REF</td><td align="center">join 查询过程中，关联条件为主键或者唯一索引，出来的行数不止一行 eq_ref是一种性能非常好的 join 操作。</td></tr><tr><td align="center">CONST</td><td align="center">常量，表最多有一个匹配行,因为仅有一行,在这行的列值可被优化器剩余部分认为是常数,const表很快,因为它们只读取一次。</td></tr><tr><td align="center">SYSTEM</td><td align="center">系统，表仅有一行(=系统表)。这是const联接类型的一个特例。</td></tr></tbody></table><p>性能：<code>all</code> &lt; <code>index</code> &lt; <code>range</code> &lt; <code>index_merge</code> &lt; <code>ref_or_null</code> &lt; <code>ref</code> &lt; <code>eq_ref</code> &lt; <code>system/const</code><br>性能在 range 之下基本都可以进行调优。</p><p><strong>possible_keys</strong> : 可能使用的索引</p><hr><p><strong>key</strong> : 真实使用的</p><hr><p><strong>key_len</strong> : MySQL中使用索引字节长度</p><hr><p><strong>rows</strong> : mysql 预估为了找到所需的行而要读取的行数</p><hr><p><strong>extra</strong>:</p><table><thead><tr><th align="center">extra</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Using index</td><td align="center">此值表示mysql将使用覆盖索引，以避免访问表。</td></tr><tr><td align="center">Using where</td><td align="center">mysql 将在存储引擎检索行后再进行过滤，许多where条件里涉及索引中的列，当(并且如果)它读取索引时，就能被存储引擎检验，因此不是所有带where子句的查询都会显示“Using where”。有时“Using where”的出现就是一个暗示：查询可受益于不同的索引。</td></tr><tr><td align="center">Using temporary</td><td align="center">mysql 对查询结果排序时会使用临时表。</td></tr><tr><td align="center">Using filesort</td><td align="center">mysql会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。mysql有两种文件排序算法，这两种排序方式都可以在内存或者磁盘上完成，explain不会告诉你mysql将使用哪一种文件排序，也不会告诉你排序会在内存里还是磁盘上完成。</td></tr><tr><td align="center">Range checked for each record(index map: N)</td><td align="center">没有好用的索引，新的索引将在联接的每一行上重新估算，N是显示在possible_keys列中索引的位图，并且是冗余的</td></tr></tbody></table><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>limit 匹配后就不会继续进行扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM <span class="built_in">test</span> WHERE email = <span class="string">'test@126.com'</span> LIMIT 1;</span></span><br><span class="line">+-----+------------+--------------------+-------+</span><br><span class="line">| nid | name       | email              | extra |</span><br><span class="line">+-----+------------+--------------------+-------+</span><br><span class="line">| 123 | klvchen123 | klvchen123@126.com | 123   |</span><br><span class="line">+-----+------------+--------------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="正确使用索引"><a href="#正确使用索引" class="headerlink" title="正确使用索引"></a>正确使用索引</h3><h4 id="不走索引的情况"><a href="#不走索引的情况" class="headerlink" title="不走索引的情况"></a>不走索引的情况</h4><ol><li><p><strong>以%开头的like查询不能够利用B-tree索引，执行计划中key的值为NULL表示没有使用索引</strong></p></li><li><p><strong>数据类型出现隐式转换的时候也不会使用索引</strong></p></li><li><p><strong>or 条件中有未建立索引的列才,索引失效</strong></p></li><li><p><strong>!=  和 &gt; 号</strong></p><p>例外：如果是主键，则会走索引</p></li><li><p><strong>order by</strong></p><p>例外：如果 order by 是主键或索引是整数类型，则会走索引</p></li><li><p><strong>合索引查询条件不符合最左匹配原则，是不会使用复合索引的。</strong></p></li><li><p><strong>如果MySQL估计使用索引比全表扫描慢，则不使用索引。</strong></p></li></ol><h4 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h4><ol><li>相关子查询(dependent subquery)优化</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;执行计划&quot;&gt;&lt;a href=&quot;#执行计划&quot; class=&quot;headerlink&quot; title=&quot;执行计划&quot;&gt;&lt;/a&gt;执行计划&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h
      
    
    </summary>
    
      <category term="database" scheme="https://onehuang.github.io/categories/database/"/>
    
    
      <category term="mysql" scheme="https://onehuang.github.io/tags/mysql/"/>
    
      <category term="explain" scheme="https://onehuang.github.io/tags/explain/"/>
    
  </entry>
  
  <entry>
    <title>idea插件总结</title>
    <link href="https://onehuang.github.io/2019/09/18/2019-09-18-idea%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://onehuang.github.io/2019/09/18/2019-09-18-idea插件总结/</id>
    <published>2019-09-18T01:44:29.000Z</published>
    <updated>2019-09-18T02:02:01.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea插件总结"><a href="#idea插件总结" class="headerlink" title="idea插件总结"></a>idea插件总结</h1><ol><li>实体类插件<ol><li>Lombok</li></ol></li><li>代码统计工具<ol><li>Statistic</li></ol></li><li>主题插件<ol><li>Material</li></ol></li><li>bug排查插件<ol><li>FindBugs-IDEA</li></ol></li><li>漏洞审查插件<ol><li>Snyk</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;idea插件总结&quot;&gt;&lt;a href=&quot;#idea插件总结&quot; class=&quot;headerlink&quot; title=&quot;idea插件总结&quot;&gt;&lt;/a&gt;idea插件总结&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;实体类插件&lt;ol&gt;
&lt;li&gt;Lombok&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="工具" scheme="https://onehuang.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="https://onehuang.github.io/tags/java/"/>
    
      <category term="idea" scheme="https://onehuang.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>2019-09-08-Arthas总结</title>
    <link href="https://onehuang.github.io/2019/09/18/2019-09-08-Arthas%E6%80%BB%E7%BB%93/"/>
    <id>https://onehuang.github.io/2019/09/18/2019-09-08-Arthas总结/</id>
    <published>2019-09-18T01:41:58.210Z</published>
    <updated>2019-09-18T01:41:58.214Z</updated>
    
    <content type="html"><![CDATA[<p>本文是官方文档的搬运，只为了记录。</p><h2 id="Arthas（阿尔萨斯）-能为你做什么？"><a href="#Arthas（阿尔萨斯）-能为你做什么？" class="headerlink" title="Arthas（阿尔萨斯） 能为你做什么？"></a>Arthas（阿尔萨斯） 能为你做什么？</h2><p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p><p>当你遇到以下类似问题而束手无策时，<code>Arthas</code>可以帮助你解决：</p><ol><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li><li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到JVM的实时运行状态？</li></ol><p>Arthas<code>支持JDK 6+，支持Linux/Mac/Winodws，采用命令行交互模式，同时提供丰富的</code>Tab` 自动补全功能，进一步方便进行问题的定位和诊断。</p><h1 id="Arthas-Install"><a href="#Arthas-Install" class="headerlink" title="Arthas Install"></a>Arthas Install</h1><h3 id="使用arthas-boot（推荐）"><a href="#使用arthas-boot（推荐）" class="headerlink" title="使用arthas-boot（推荐）"></a>使用<code>arthas-boot</code>（推荐）</h3><p>下载<code>arthas-boot.jar</code>，然后用<code>java -jar</code>的方式启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure><p>打印帮助信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure><ul><li><p>如果下载速度比较慢，可以使用aliyun的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar --repo-mirror aliyun --use-http</span><br></pre></td></tr></table></figure></li><li><p>如果从github下载有问题，可以使用gitee镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://arthas.gitee.io/arthas-boot.jar</span><br></pre></td></tr></table></figure></li></ul><p>其他安装方法见<a href="https://alibaba.github.io/arthas/install-detail.html" target="_blank" rel="noopener">安装方法</a>。</p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="1-启动Demo"><a href="#1-启动Demo" class="headerlink" title="1. 启动Demo"></a>1. 启动Demo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://alibaba.github.io/arthas/arthas-demo.jar</span><br><span class="line">java -jar arthas-demo.jar</span><br></pre></td></tr></table></figure><p><code>arthas-demo</code>是一个简单的程序，每隔一秒生成一个随机数，再执行质因式分解，并打印出分解结果。</p><p><code>arthas-demo</code>源代码：<a href="https://github.com/alibaba/arthas/blob/master/demo/src/main/java/demo/MathGame.java" target="_blank" rel="noopener">查看</a></p><h2 id="2-启动arthas"><a href="#2-启动arthas" class="headerlink" title="2. 启动arthas"></a>2. 启动arthas</h2><p>在命令行下面执行（使用和目标进程一致的用户启动，否则可能attach失败）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure><ul><li>执行该程序的用户需要和目标进程具有相同的权限。比如以<code>admin</code>用户来执行：<code>sudo su admin &amp;&amp; java -jar arthas-boot.jar</code> 或 <code>sudo -u admin -EH java -jar arthas-boot.jar</code>。</li><li>如果attach不上目标进程，可以查看<code>~/logs/arthas/</code> 目录下的日志。</li><li>如果下载速度比较慢，可以使用aliyun的镜像：<code>java -jar arthas-boot.jar --repo-mirror aliyun --use-http</code></li><li><code>java -jar arthas-boot.jar -h</code> 打印更多参数信息。</li></ul><p>选择应用java进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ $ java -jar arthas-boot.jar</span><br><span class="line">* [1]: 35542</span><br><span class="line">  [2]: 71560 arthas-demo.jar</span><br></pre></td></tr></table></figure><p>Demo进程是第2个，则输入2，再输入<code>回车/enter</code>。Arthas会attach到目标进程上，并输出日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Try to attach process 71560</span><br><span class="line">[INFO] Attach process 71560 success.</span><br><span class="line">[INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.</span><br><span class="line"> /  O  \ |  .--. <span class="string">''</span>--.  .--<span class="string">'|  '</span>--<span class="string">'  | /  O  \ '</span>   .-<span class="string">'</span></span><br><span class="line"><span class="string">|  .-.  ||  '</span>--<span class="string">'.'</span>   |  |   |  .--.  ||  .-.  |`.  `-.</span><br><span class="line">|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">'    |</span></span><br><span class="line"><span class="string">`--'</span> `--<span class="string">'`--'</span> <span class="string">'--'</span>   `--<span class="string">'   `--'</span>  `--<span class="string">'`--'</span> `--<span class="string">'`-----'</span></span><br><span class="line"> </span><br><span class="line">wiki: https://alibaba.github.io/arthas</span><br><span class="line">version: 3.0.5.20181127201536</span><br><span class="line">pid: 71560</span><br><span class="line">time: 2018-11-28 19:16:24</span><br><span class="line"> </span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="3-查看dashboard"><a href="#3-查看dashboard" class="headerlink" title="3. 查看dashboard"></a>3. 查看dashboard</h2><p>输入<a href="https://alibaba.github.io/arthas/dashboard.html" target="_blank" rel="noopener">dashboard</a>，按<code>回车/enter</code>，会展示当前进程的信息，按<code>ctrl+c</code>可以中断执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ dashboard</span><br><span class="line">ID     NAME                   GROUP          PRIORI STATE  %CPU    TIME   INTERRU DAEMON</span><br><span class="line">17     pool-2-thread-1        system         5      WAITIN 67      0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">27     Timer-for-arthas-dashb system         10     RUNNAB 32      0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">11     AsyncAppender-Worker<span class="_">-a</span> system         9      WAITIN 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">9      Attach Listener        system         9      RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">3      Finalizer              system         8      WAITIN 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">2      Reference Handler      system         10     WAITIN 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">4      Signal Dispatcher      system         9      RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">26     as-command-execute-dae system         10     TIMED_ 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">13     job-timeout            system         9      TIMED_ 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">1      main                   main           5      TIMED_ 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">14     nioEventLoopGroup-2-1  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">18     nioEventLoopGroup-2-2  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">23     nioEventLoopGroup-2-3  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">15     nioEventLoopGroup-3-1  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">Memory             used   total max    usage GC</span><br><span class="line">heap               32M    155M  1820M  1.77% gc.ps_scavenge.count  4</span><br><span class="line">ps_eden_space      14M    65M   672M   2.21% gc.ps_scavenge.time(m 166</span><br><span class="line">ps_survivor_space  4M     5M    5M           s)</span><br><span class="line">ps_old_gen         12M    85M   1365M  0.91% gc.ps_marksweep.count 0</span><br><span class="line">nonheap            20M    23M   -1           gc.ps_marksweep.time( 0</span><br><span class="line">code_cache         3M     5M    240M   1.32% ms)</span><br><span class="line">Runtime</span><br><span class="line">os.name                Mac OS X</span><br><span class="line">os.version             10.13.4</span><br><span class="line">java.version           1.8.0_162</span><br><span class="line">java.home              /Library/Java/JavaVir</span><br><span class="line">                       tualMachines/jdk1.8.0</span><br><span class="line">                       _162.jdk/Contents/Hom</span><br><span class="line">                       e/jre</span><br></pre></td></tr></table></figure><h2 id="4-通过thread命令来获取到arthas-demo进程的Main-Class"><a href="#4-通过thread命令来获取到arthas-demo进程的Main-Class" class="headerlink" title="4. 通过thread命令来获取到arthas-demo进程的Main Class"></a>4. 通过thread命令来获取到<code>arthas-demo</code>进程的Main Class</h2><p><code>thread 1</code>会打印线程ID 1的栈，通常是main函数的线程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ thread 1 | grep <span class="string">'main('</span></span><br><span class="line">    at demo.MathGame.main(MathGame.java:17)</span><br></pre></td></tr></table></figure><h2 id="5-通过jad来反编译Main-Class"><a href="#5-通过jad来反编译Main-Class" class="headerlink" title="5. 通过jad来反编译Main Class"></a>5. 通过jad来反编译Main Class</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">$ jad demo.MathGame</span><br><span class="line"> </span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">  +-sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@66350f69</span><br><span class="line"> </span><br><span class="line">Location:</span><br><span class="line">/tmp/arthas-demo.jar</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line"> * Decompiled with CFR 0_132.</span><br><span class="line"> */</span><br><span class="line">package demo;</span><br><span class="line"> </span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line">public class MathGame &#123;</span><br><span class="line">    private static Random random = new Random();</span><br><span class="line">    private int illegalArgumentCount = 0;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        MathGame game = new MathGame();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            game.run();</span><br><span class="line">            TimeUnit.SECONDS.sleep(1L);</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void run() throws InterruptedException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int number = random.nextInt();</span><br><span class="line">            List&lt;Integer&gt; primeFactors = this.primeFactors(number);</span><br><span class="line">            MathGame.print(number, primeFactors);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"illegalArgumentCount:%3d, "</span>, this.illegalArgumentCount) + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void <span class="built_in">print</span>(int number, List&lt;Integer&gt; primeFactors) &#123;</span><br><span class="line">        StringBuffer sb = new StringBuffer(<span class="string">""</span> + number + <span class="string">"="</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = primeFactors.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            int factor = iterator.next();</span><br><span class="line">            sb.append(factor).append(<span class="string">'*'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sb.charAt(sb.length() - 1) == <span class="string">'*'</span>) &#123;</span><br><span class="line">            sb.deleteCharAt(sb.length() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public List&lt;Integer&gt; primeFactors(int number) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &lt; 2) &#123;</span><br><span class="line">            ++this.illegalArgumentCount;</span><br><span class="line">            throw new IllegalArgumentException(<span class="string">"number is: "</span> + number + <span class="string">", need &gt;= 2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        int i = 2;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= number) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % i == 0) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">                number /= i;</span><br><span class="line">                i = 2;</span><br><span class="line">                <span class="built_in">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 970 ms.</span><br></pre></td></tr></table></figure><h2 id="6-watch"><a href="#6-watch" class="headerlink" title="6. watch"></a>6. watch</h2><p>通过<a href="https://alibaba.github.io/arthas/watch.html" target="_blank" rel="noopener">watch</a>命令来查看<code>demo.MathGame#primeFactors</code>函数的返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors returnObj</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 107 ms.</span><br><span class="line">ts=2018-11-28 19:22:30; [cost=1.715367ms] result=null</span><br><span class="line">ts=2018-11-28 19:22:31; [cost=0.185203ms] result=null</span><br><span class="line">ts=2018-11-28 19:22:32; [cost=19.012416ms] result=@ArrayList[</span><br><span class="line">    @Integer[5],</span><br><span class="line">    @Integer[47],</span><br><span class="line">    @Integer[2675531],</span><br><span class="line">]</span><br><span class="line">ts=2018-11-28 19:22:33; [cost=0.311395ms] result=@ArrayList[</span><br><span class="line">    @Integer[2],</span><br><span class="line">    @Integer[5],</span><br><span class="line">    @Integer[317],</span><br><span class="line">    @Integer[503],</span><br><span class="line">    @Integer[887],</span><br><span class="line">]</span><br><span class="line">ts=2018-11-28 19:22:34; [cost=10.136007ms] result=@ArrayList[</span><br><span class="line">    @Integer[2],</span><br><span class="line">    @Integer[2],</span><br><span class="line">    @Integer[3],</span><br><span class="line">    @Integer[3],</span><br><span class="line">    @Integer[31],</span><br><span class="line">    @Integer[717593],</span><br><span class="line">]</span><br><span class="line">ts=2018-11-28 19:22:35; [cost=29.969732ms] result=@ArrayList[</span><br><span class="line">    @Integer[5],</span><br><span class="line">    @Integer[29],</span><br><span class="line">    @Integer[7651739],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>更多的功能可以查看<a href="https://alibaba.github.io/arthas/advanced-use.html" target="_blank" rel="noopener">进阶使用</a>。</p><h2 id="7-退出arthas"><a href="#7-退出arthas" class="headerlink" title="7. 退出arthas"></a>7. 退出arthas</h2><p>如果只是退出当前的连接，可以用<code>quit</code>或者<code>exit</code>命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p><p>如果想完全退出arthas，可以执行<code>shutdown</code>命令。</p><h1 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li>help——查看命令帮助信息</li><li><a href="https://alibaba.github.io/arthas/cat.html" target="_blank" rel="noopener">cat</a>——打印文件内容，和linux里的cat命令类似</li><li><a href="https://alibaba.github.io/arthas/pwd.html" target="_blank" rel="noopener">pwd</a>——返回当前的工作目录，和linux命令类似</li><li>cls——清空当前屏幕区域</li><li>session——查看当前会话的信息</li><li><a href="https://alibaba.github.io/arthas/reset.html" target="_blank" rel="noopener">reset</a>——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</li><li>version——输出当前目标 Java 进程所加载的 Arthas 版本号</li><li>history——打印命令历史</li><li>quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</li><li>shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出</li><li><a href="https://alibaba.github.io/arthas/keymap.html" target="_blank" rel="noopener">keymap</a>——Arthas快捷键列表及自定义快捷键</li></ul><h2 id="jvm相关"><a href="#jvm相关" class="headerlink" title="jvm相关"></a>jvm相关</h2><ul><li><a href="https://alibaba.github.io/arthas/dashboard.html" target="_blank" rel="noopener">dashboard</a>——当前系统的实时数据面板</li><li><a href="https://alibaba.github.io/arthas/thread.html" target="_blank" rel="noopener">thread</a>——查看当前 JVM 的线程堆栈信息</li><li><a href="https://alibaba.github.io/arthas/jvm.html" target="_blank" rel="noopener">jvm</a>——查看当前 JVM 的信息</li><li><a href="https://alibaba.github.io/arthas/sysprop.html" target="_blank" rel="noopener">sysprop</a>——查看和修改JVM的系统属性</li><li><a href="https://alibaba.github.io/arthas/sysenv.html" target="_blank" rel="noopener">sysenv</a>——查看JVM的环境变量</li><li><a href="https://alibaba.github.io/arthas/getstatic.html" target="_blank" rel="noopener">getstatic</a>——查看类的静态属性</li><li><strong>New!</strong> <a href="https://alibaba.github.io/arthas/ognl.html" target="_blank" rel="noopener">ognl</a>——执行ognl表达式</li><li><strong>New!</strong> <a href="https://alibaba.github.io/arthas/mbean.html" target="_blank" rel="noopener">mbean</a>——查看 Mbean 的信息</li></ul><h2 id="class-classloader相关"><a href="#class-classloader相关" class="headerlink" title="class/classloader相关"></a>class/classloader相关</h2><ul><li><a href="https://alibaba.github.io/arthas/sc.html" target="_blank" rel="noopener">sc</a>——查看JVM已加载的类信息</li><li><a href="https://alibaba.github.io/arthas/sm.html" target="_blank" rel="noopener">sm</a>——查看已加载类的方法信息</li><li><a href="https://alibaba.github.io/arthas/jad.html" target="_blank" rel="noopener">jad</a>——反编译指定已加载类的源码</li><li><a href="https://alibaba.github.io/arthas/mc.html" target="_blank" rel="noopener">mc</a>——内存编绎器，内存编绎<code>.java</code>文件为<code>.class</code>文件</li><li><a href="https://alibaba.github.io/arthas/redefine.html" target="_blank" rel="noopener">redefine</a>——加载外部的<code>.class</code>文件，redefine到JVM里</li><li><a href="https://alibaba.github.io/arthas/dump.html" target="_blank" rel="noopener">dump</a>——dump 已加载类的 byte code 到特定目录</li><li><a href="https://alibaba.github.io/arthas/classloader.html" target="_blank" rel="noopener">classloader</a>——查看classloader的继承树，urls，类加载信息，使用classloader去getResource</li></ul><h2 id="monitor-watch-trace相关"><a href="#monitor-watch-trace相关" class="headerlink" title="monitor/watch/trace相关"></a>monitor/watch/trace相关</h2><blockquote><p>请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 <code>shutdown</code> 或将增强过的类执行 <code>reset</code> 命令。</p></blockquote><ul><li><a href="https://alibaba.github.io/arthas/monitor.html" target="_blank" rel="noopener">monitor</a>——方法执行监控</li><li><a href="https://alibaba.github.io/arthas/watch.html" target="_blank" rel="noopener">watch</a>——方法执行数据观测</li><li><a href="https://alibaba.github.io/arthas/trace.html" target="_blank" rel="noopener">trace</a>——方法内部调用路径，并输出方法路径上的每个节点上耗时</li><li><a href="https://alibaba.github.io/arthas/stack.html" target="_blank" rel="noopener">stack</a>——输出当前方法被调用的调用路径</li><li><a href="https://alibaba.github.io/arthas/tt.html" target="_blank" rel="noopener">tt</a>——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</li></ul><h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><ul><li><a href="https://alibaba.github.io/arthas/options.html" target="_blank" rel="noopener">options</a>——查看或设置Arthas全局开关</li></ul><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>Arthas支持使用管道对上述命令的结果进行进一步的处理，如<code>sm java.lang.String * | grep &#39;index&#39;</code></p><ul><li>grep——搜索满足条件的结果</li><li>plaintext——将命令的结果去除ANSI颜色</li><li>wc——按行统计输出结果</li></ul><h2 id="后台异步任务"><a href="#后台异步任务" class="headerlink" title="后台异步任务"></a>后台异步任务</h2><p>当线上出现偶发的问题，比如需要watch某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考<a href="https://alibaba.github.io/arthas/async.html" target="_blank" rel="noopener">这里</a></p><ul><li>使用 &gt; 将结果重写向到日志文件，使用 &amp; 指定命令是后台运行，session断开不影响任务执行（生命周期默认为1天）</li><li>jobs——列出所有job</li><li>kill——强制终止任务</li><li>fg——将暂停的任务拉到前台执行</li><li>bg——将暂停的任务放到后台执行</li></ul><h2 id="Web-Console"><a href="#Web-Console" class="headerlink" title="Web Console"></a>Web Console</h2><p>通过websocket连接Arthas。</p><ul><li><a href="https://alibaba.github.io/arthas/web-console.html" target="_blank" rel="noopener">Web Console</a></li></ul><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><ul><li><a href="https://alibaba.github.io/arthas/async.html" target="_blank" rel="noopener">异步命令支持</a></li><li><a href="https://alibaba.github.io/arthas/save-log.html" target="_blank" rel="noopener">执行结果存日志</a></li><li><a href="https://alibaba.github.io/arthas/batch-support.html" target="_blank" rel="noopener">批处理的支持</a></li><li><a href="https://github.com/alibaba/arthas/issues/11" target="_blank" rel="noopener">ognl表达式的用法说明</a></li></ul><h1 id="Web-Console-1"><a href="#Web-Console-1" class="headerlink" title="Web Console"></a>Web Console</h1><p>Arthas目前支持Web Console，用户在attach成功之后，可以直接访问：<a href="http://127.0.0.1:8563/。" target="_blank" rel="noopener">http://127.0.0.1:8563/。</a></p><p>可以填入IP，远程连接其它机器上的arthas。</p><h1 id="Arthas异步调用"><a href="#Arthas异步调用" class="headerlink" title="Arthas异步调用"></a>Arthas异步调用</h1><p>arthas中的异步调用，使用了仿linux系统任务相关的命令。<a href="https://ehlxr.me/2017/01/18/Linux-中-fg、bg、jobs、-指令/" target="_blank" rel="noopener">linux任务相关介绍</a>。</p><h2 id="1-使用-amp-在后台执行任务"><a href="#1-使用-amp-在后台执行任务" class="headerlink" title="1. 使用&amp;在后台执行任务"></a>1. 使用&amp;在后台执行任务</h2><p>比如希望执行后台执行trace命令，那么调用下面命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trace Test t &amp;</span><br></pre></td></tr></table></figure><p>这时命令在后台执行，可以在console中继续执行其他命令。</p><h2 id="2-通过jobs查看任务"><a href="#2-通过jobs查看任务" class="headerlink" title="2. 通过jobs查看任务"></a>2. 通过jobs查看任务</h2><p>如果希望查看当前有哪些arthas任务在执行，可以执行jobs命令，执行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ jobs</span><br><span class="line">[10]*</span><br><span class="line">       Stopped           watch com.taobao.container.Test test &quot;params[0].&#123;? #this.name == null &#125;&quot; -x 2</span><br><span class="line">       execution count : 19</span><br><span class="line">       start time      : Fri Sep 22 09:59:55 CST 2017</span><br><span class="line">       timeout date    : Sat Sep 23 09:59:55 CST 2017</span><br><span class="line">       session         : 3648e874-5e69-473f-9eed-7f89660b079b (current)</span><br></pre></td></tr></table></figure><p>可以看到目前有一个后台任务在执行。</p><ul><li>job id是10, <code>*</code> 表示此job是当前session创建</li><li>状态是Stopped</li><li>execution count是执行次数，从启动开始已经执行了19次</li><li>timeout date是超时的时间，到这个时间，任务将会自动超时退出</li></ul><h2 id="3-任务暂停和取消"><a href="#3-任务暂停和取消" class="headerlink" title="3. 任务暂停和取消"></a>3. 任务暂停和取消</h2><p>当任务正在前台执行，比如直接调用命令<code>trace Test t</code>或者调用后台执行命令<code>trace Test t &amp;</code>后又通过<code>fg</code>命令将任务转到前台。这时console中无法继续执行命令，但是可以接收并处理以下事件：</p><ul><li>‘ctrl + z’：将任务暂停。通过<code>jbos</code>查看任务状态将会变为Stopped，通过<code>bg</code>或者<code>fg</code>可让任务重新开始执行</li><li>‘ctrl + c’：停止任务</li><li>‘ctrl + d’：按照linux语义应当是退出终端，目前arthas中是空实现，不处理</li></ul><h2 id="4-fg、bg命令，将命令转到前台、后台继续执行"><a href="#4-fg、bg命令，将命令转到前台、后台继续执行" class="headerlink" title="4. fg、bg命令，将命令转到前台、后台继续执行"></a>4. fg、bg命令，将命令转到前台、后台继续执行</h2><ul><li>任务在后台执行或者暂停状态（<code>ctrl + z</code>暂停任务）时，执行<code>fg</code>将可以把对应的任务转到前台继续执行。在前台执行时，无法在console中执行其他命令</li><li>当任务处于暂停状态时（<code>ctrl + z</code>暂停任务），执行<code>bg</code>将可以把对应的任务在后台继续执行</li><li>非当前session创建的job，只能由当前session fg到前台执行</li></ul><h2 id="5-任务输出重定向"><a href="#5-任务输出重定向" class="headerlink" title="5. 任务输出重定向"></a>5. 任务输出重定向</h2><p>可通过<code>&gt;</code>或者<code>&gt;&gt;</code>将任务输出结果输出到指定的文件中，可以和<code>&amp;</code>一起使用，实现arthas命令的异步调用。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ trace Test t &gt;&gt; test.out &amp;</span><br></pre></td></tr></table></figure><p>这时trace命令会在后台执行，并且把结果输出到~/logs/arthas-cache/test.out。可继续执行其他命令。并可查看文件中的命令执行结果。</p><p>当连接到远程的arthas server时，可能无法查看远程机器的文件，arthas同时支持了自动重定向到本地缓存路径。使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ trace Test t &gt;&gt;  &amp;</span><br><span class="line">job id  : 2</span><br><span class="line">cache location  : /Users/gehui/logs/arthas-cache/28198/2</span><br></pre></td></tr></table></figure><p>可以看到并没有指定重定向文件位置，arthas自动重定向到缓存中了，执行命令后会输出job id和cache location。cache location就是重定向文件的路径，在系统logs目录下，路径包括pid和job id，避免和其他任务冲突。命令输出结果到<code>/Users/gehui/logs/arthas-cache/28198/2</code>中，job id为2。</p><h2 id="6-停止命令"><a href="#6-停止命令" class="headerlink" title="6. 停止命令"></a>6. 停止命令</h2><p>异步执行的命令，如果希望停止，可执行kill <job-id></job-id></p><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h2><ul><li>最多同时支持8个命令使用重定向将结果写日志</li><li>请勿同时开启过多的后台异步命令，以免对目标JVM性能造成影响</li></ul><h1 id="执行结果存日志"><a href="#执行结果存日志" class="headerlink" title="执行结果存日志"></a>执行结果存日志</h1><blockquote><p>将命令的结果完整保存在日志文件中，便于后续进行分析</p></blockquote><ul><li>默认情况下，该功能是关闭的，如果需要开启，请执行以下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ options save-result true</span><br><span class="line"> NAME         BEFORE-VALUE  AFTER-VALUE</span><br><span class="line">----------------------------------------</span><br><span class="line"> save-result  false         true</span><br><span class="line">Affect(row-cnt:1) cost in 3 ms.</span><br></pre></td></tr></table></figure><p>看到上面的输出，即表示成功开启该功能；</p><ul><li>日志文件路径</li></ul><p>结果会异步保存在：<code>{user.home}/logs/arthas-cache/result.log</code>，请定期进行清理，以免占据磁盘空间</p><h2 id="使用新版本Arthas的异步后台任务将结果存日志文件"><a href="#使用新版本Arthas的异步后台任务将结果存日志文件" class="headerlink" title="使用新版本Arthas的异步后台任务将结果存日志文件"></a>使用新版本Arthas的异步后台任务将结果存日志文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ trace Test t &gt;&gt;  &amp;</span><br><span class="line">job id  : 2</span><br><span class="line">cache location  : /Users/admin/logs/arthas-cache/28198/2</span><br></pre></td></tr></table></figure><p>此时命令会在后台异步执行，并将结果异步保存在文件（~/logs/arthas-cache/${PID}/${JobId}）中；</p><ul><li>此时任务的执行不受session断开的影响；任务默认超时时间是1天，可以通过全局 <code>options</code> 命令修改默认超时时间；</li><li>此命令的结果将异步输出到文件中；此时不管 <code>save-result</code> 是否为true，都不会再往~/logs/arthas-cache/result.log 中异步写结果</li></ul><h1 id="批处理功能"><a href="#批处理功能" class="headerlink" title="批处理功能"></a>批处理功能</h1><blockquote><p>通过批处理功能，arthas支持一次性批量运行多个命令，并取得命令执行的结果。</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="第一步：-创建你的批处理脚本"><a href="#第一步：-创建你的批处理脚本" class="headerlink" title="第一步： 创建你的批处理脚本"></a>第一步： 创建你的批处理脚本</h3><p>这里我们新建了一个<code>test.as</code>脚本，为了规范，我们采用了.as后缀名，但事实上任意的本文文件都ok。</p><blockquote><p>注意事项</p><ul><li>目前需要每个命令占一行</li><li>dashboard务必开启批处理模式(<code>-b</code>)，指定执行次数(<code>-n</code>)，否则会导致批处理脚本无法终止</li><li>watch/tt/trace/monitor/stack等命令务必指定执行次数(<code>-n</code>)，否则会导致批处理脚本无法终止</li><li>可以使用异步后台任务，如 <code>watch c.t.X test returnObj &gt; &amp;</code>，让命令一直在后台运行，通过日志获取结果，<a href="https://alibaba.github.io/arthas/async.html" target="_blank" rel="noopener">获取更多异步任务的信息</a></li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  arthas git:(develop) cat /var/tmp/test.as</span><br><span class="line">help</span><br><span class="line">dashboard -b -n 1</span><br><span class="line">session</span><br><span class="line">thread</span><br><span class="line">sc -d org.apache.commons.lang.StringUtils</span><br></pre></td></tr></table></figure><h3 id="第二步：-运行你的批处理脚本"><a href="#第二步：-运行你的批处理脚本" class="headerlink" title="第二步： 运行你的批处理脚本"></a>第二步： 运行你的批处理脚本</h3><p>通过<code>-b</code>开启批处理模式， <code>-f</code>执行脚本文件， 批处理脚本默认会输出到标准输出中，可以将结果重定向到文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./as.sh -b -f /var/tmp/test.as 56328 &gt; test.out</span><br></pre></td></tr></table></figure><h3 id="第三步：-查看运行结果"><a href="#第三步：-查看运行结果" class="headerlink" title="第三步： 查看运行结果"></a>第三步： 查看运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.out</span><br></pre></td></tr></table></figure><h1 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h1><ul><li><a href="https://alibaba.github.io/arthas/dashboard.html" target="_blank" rel="noopener">dashboard</a></li><li><a href="https://alibaba.github.io/arthas/thread.html" target="_blank" rel="noopener">thread</a></li><li><a href="https://alibaba.github.io/arthas/jvm.html" target="_blank" rel="noopener">jvm</a></li><li><a href="https://alibaba.github.io/arthas/sysprop.html" target="_blank" rel="noopener">sysprop</a></li><li><a href="https://alibaba.github.io/arthas/sysenv.html" target="_blank" rel="noopener">sysenv</a></li><li><a href="https://alibaba.github.io/arthas/mbean.html" target="_blank" rel="noopener">mbean</a></li><li><a href="https://alibaba.github.io/arthas/getstatic.html" target="_blank" rel="noopener">getstatic</a></li><li><a href="https://alibaba.github.io/arthas/ognl.html" target="_blank" rel="noopener">ognl</a></li><li><a href="https://alibaba.github.io/arthas/sc.html" target="_blank" rel="noopener">sc</a></li><li><a href="https://alibaba.github.io/arthas/sm.html" target="_blank" rel="noopener">sm</a></li><li><a href="https://alibaba.github.io/arthas/dump.html" target="_blank" rel="noopener">dump</a></li><li><a href="https://alibaba.github.io/arthas/jad.html" target="_blank" rel="noopener">jad</a></li><li><a href="https://alibaba.github.io/arthas/classloader.html" target="_blank" rel="noopener">classloader</a></li><li><a href="https://alibaba.github.io/arthas/mc.html" target="_blank" rel="noopener">mc</a></li><li><a href="https://alibaba.github.io/arthas/redefine.html" target="_blank" rel="noopener">redefine</a></li><li><a href="https://alibaba.github.io/arthas/monitor.html" target="_blank" rel="noopener">monitor</a></li><li><a href="https://alibaba.github.io/arthas/watch.html" target="_blank" rel="noopener">watch</a></li><li><a href="https://alibaba.github.io/arthas/trace.html" target="_blank" rel="noopener">trace</a></li><li><a href="https://alibaba.github.io/arthas/stack.html" target="_blank" rel="noopener">stack</a></li><li><a href="https://alibaba.github.io/arthas/tt.html" target="_blank" rel="noopener">tt</a></li><li><a href="https://alibaba.github.io/arthas/cat.html" target="_blank" rel="noopener">cat</a></li><li><a href="https://alibaba.github.io/arthas/pwd.html" target="_blank" rel="noopener">pwd</a></li><li><a href="https://alibaba.github.io/arthas/options.html" target="_blank" rel="noopener">options</a></li></ul><h2 id="Arthas-基础命令"><a href="#Arthas-基础命令" class="headerlink" title="Arthas 基础命令"></a>Arthas 基础命令</h2><ul><li>help——查看命令帮助信息</li><li>cls——清空当前屏幕区域</li><li>session——查看当前会话的信息</li><li><a href="https://alibaba.github.io/arthas/reset.html" target="_blank" rel="noopener">reset</a>——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</li><li>version——输出当前目标 Java 进程所加载的 Arthas 版本号</li><li>history——打印命令历史</li><li>quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</li><li>shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出</li><li><a href="https://alibaba.github.io/arthas/keymap.html" target="_blank" rel="noopener">keymap</a>——Arthas快捷键列表及自定义快捷键</li></ul><p>详细命令<a href="https://alibaba.github.io/arthas/commands.html" target="_blank" rel="noopener">请移步</a></p><h1 id="Docker等容器部署"><a href="#Docker等容器部署" class="headerlink" title="Docker等容器部署"></a>Docker等容器部署</h1><p><a href="https://alibaba.github.io/arthas/docker.html" target="_blank" rel="noopener">Docker部署arthas详细**</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是官方文档的搬运，只为了记录。&lt;/p&gt;
&lt;h2 id=&quot;Arthas（阿尔萨斯）-能为你做什么？&quot;&gt;&lt;a href=&quot;#Arthas（阿尔萨斯）-能为你做什么？&quot; class=&quot;headerlink&quot; title=&quot;Arthas（阿尔萨斯） 能为你做什么？&quot;&gt;&lt;/a&gt;A
      
    
    </summary>
    
      <category term="工具" scheme="https://onehuang.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Arthas" scheme="https://onehuang.github.io/tags/Arthas/"/>
    
      <category term="java" scheme="https://onehuang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 操作手册</title>
    <link href="https://onehuang.github.io/2019/09/18/2019-07-20-hexo%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://onehuang.github.io/2019/09/18/2019-07-20-hexo使用总结/</id>
    <published>2019-09-18T01:41:58.194Z</published>
    <updated>2019-09-18T01:41:58.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol><li><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>Git</li><li>Nodejs</li></ol></li><li><p>sudo npm install -g hexo-cli</p></li><li><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><ol><li><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;$ </span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;$ npm install</span><br></pre></td></tr></table></figure><ol start="2"><li><p>目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></li><li><p>_config.yml</p><p>网站的配置信息，可以配置大量参数</p></li></ol></li><li><p>pcakage.json</p></li><li><p>scaffolds</p><ol><li>模板文件夹</li></ol></li><li><p>source</p><p>资源文件夹。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes</p><p>主题文件夹。Heo会根据主题来生成静态页面。</p></li></ol></li><li><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>可以在_config.yml中修改大部分配置。</p><p><strong>网站</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>author</code></td><td align="left">您的名字</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table></li></ol><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a><strong>网址</strong></h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>url</code></td><td align="left">网址</td><td align="left"></td></tr><tr><td align="left"><code>root</code></td><td align="left">网站根目录</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td align="left"><code>:year/:month/:day/:title/</code></td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>source_dir</code></td><td align="left">资源文件夹，这个文件夹用来存放内容。</td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>public_dir</code></td><td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td><td align="left"><code>public</code></td></tr><tr><td align="left"><code>tag_dir</code></td><td align="left">标签文件夹</td><td align="left"><code>tags</code></td></tr><tr><td align="left"><code>archive_dir</code></td><td align="left">归档文件夹</td><td align="left"><code>archives</code></td></tr><tr><td align="left"><code>category_dir</code></td><td align="left">分类文件夹</td><td align="left"><code>categories</code></td></tr><tr><td align="left"><code>code_dir</code></td><td align="left">Include code 文件夹</td><td align="left"><code>downloads/code</code></td></tr><tr><td align="left"><code>i18n_dir</code></td><td align="left">国际化（i18n）文件夹</td><td align="left"><code>:lang</code></td></tr><tr><td align="left"><code>skip_render</code></td><td align="left">跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a>来匹配路径。</td><td align="left"></td></tr></tbody></table><blockquote><p>提示</p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a><strong>文章</strong></h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>new_post_name</code></td><td align="left">新文章的文件名称</td><td align="left">:title.md</td></tr><tr><td align="left"><code>default_layout</code></td><td align="left">预设布局</td><td align="left">post</td></tr><tr><td align="left"><code>auto_spacing</code></td><td align="left">在中文和英文之间加入空格</td><td align="left">false</td></tr><tr><td align="left"><code>titlecase</code></td><td align="left">把标题转换为 title case</td><td align="left">false</td></tr><tr><td align="left"><code>external_link</code></td><td align="left">在新标签中打开链接</td><td align="left">true</td></tr><tr><td align="left"><code>filename_case</code></td><td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td><td align="left">0</td></tr><tr><td align="left"><code>render_drafts</code></td><td align="left">显示草稿</td><td align="left">false</td></tr><tr><td align="left"><code>post_asset_folder</code></td><td align="left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td align="left">false</td></tr><tr><td align="left"><code>relative_link</code></td><td align="left">把链接改为与根目录的相对位址</td><td align="left">false</td></tr><tr><td align="left"><code>future</code></td><td align="left">显示未来的文章</td><td align="left">true</td></tr><tr><td align="left"><code>highlight</code></td><td align="left">代码块的设置</td><td align="left"></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a><strong>分类 &amp; 标签</strong></h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>default_category</code></td><td align="left">默认分类</td><td align="left"><code>uncategorized</code></td></tr><tr><td align="left"><code>category_map</code></td><td align="left">分类别名</td><td align="left"></td></tr><tr><td align="left"><code>tag_map</code></td><td align="left">标签别名</td><td align="left"></td></tr></tbody></table><h3 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a><strong>日期 / 时间格式</strong></h3><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>date_format</code></td><td align="left">日期格式</td><td align="left"><code>YYYY-MM-DD</code></td></tr><tr><td align="left"><code>time_format</code></td><td align="left">时间格式</td><td align="left"><code>H:mm:ss</code></td></tr></tbody></table><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a><strong>分页</strong></h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>per_page</code></td><td align="left">每页显示的文章量 (0 = 关闭分页功能)</td><td align="left"><code>10</code></td></tr><tr><td align="left"><code>pagination_dir</code></td><td align="left">分页目录</td><td align="left"><code>page</code></td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><strong>扩展</strong></h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>theme</code></td><td align="left">当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td align="left"><code>deploy</code></td><td align="left">部署部分的设置</td></tr></tbody></table><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>首先，安装 <code>hexo-migrator-rss</code> 插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-rss --save</span><br></pre></td></tr></table></figure><p>插件安装完成后，执行下列命令，从 RSS 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate rss &lt;<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h2><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h2 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h2><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code> 参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>首先，安装 <code>hexo-migrator-wordpress</code> 插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-migrator-wordpress --save</span></span><br></pre></td></tr></table></figure><p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="http://en.support.wordpress.com/export/" target="_blank" rel="noopener">WP支持页面</a>）。</p><p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 WordPress 导出的文件路径或网址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo migrate wordpress &lt;<span class="built_in">source</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">Front-matter中的分类与标签</a>）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p></blockquote><h2 id="Joomla"><a href="#Joomla" class="headerlink" title="Joomla"></a>Joomla</h2><p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-migrator-joomla --save</span></span><br></pre></td></tr></table></figure><p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ%3D%3D" target="_blank" rel="noopener">J2XML</a> 组件导出 Joomla 文章。<br>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 Joomla 导出的文件路径或网址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo migrate joomla &lt;<span class="built_in">source</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>你可以执行下列命令来创建一篇新文章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><blockquote><p>不要处理我的文章</p><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote><h2 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h2><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:title</code></td><td align="left">标题（小写，空格将会被替换为短杠）</td></tr><tr><td align="left"><code>:year</code></td><td align="left">建立的年份，比如， <code>2015</code></td></tr><tr><td align="left"><code>:month</code></td><td align="left">建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td align="left"><code>:i_month</code></td><td align="left">建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td align="left"><code>:day</code></td><td align="left">建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td align="left"><code>:i_day</code></td><td align="left">建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td></tr><tr><td align="left"><code>date</code></td><td align="left">文件建立日期</td></tr></tbody></table><h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: Hello Worlddate: 2013/7/13 20:46:25---</span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left"></td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr></tbody></table><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories:- Diarytags:- PS3- Games</span><br></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：<br>categories:<br>- Diary<br>- Life<br>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"title": "Hello World","date": "2013/7/13 20:46:25";;;</span><br></pre></td></tr></table></figure><h1 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h1><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号：</strong> quote</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><h3 id="引用书上的句子"><a href="#引用书上的句子" class="headerlink" title="引用书上的句子"></a><strong>引用书上的句子</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><p><strong>David Levithan</strong>Wide Awake</p></blockquote><p><strong>引用 Twitter</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/" target="_blank" rel="noopener">http://devdocs.io</a></p><p><strong>@DevDocs</strong><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></p></blockquote><h3 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a><strong>引用网络上的文章</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><p><strong>Seth Godin</strong><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></p></blockquote><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在文章中插入代码。</p><p><strong>别名：</strong> code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><p><strong>普通的代码块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;alert(&apos;Hello World!&apos;);&#123;% endcodeblock %&#125;</span><br><span class="line">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure><p><strong>指定语言</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br></pre></td></tr></table></figure><p><strong>附加说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125;</span><br><span class="line">Array.maparray.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><p><strong>附加说明和网址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3]&#123;% endcodeblock %&#125;</span><br><span class="line">_.compactUnderscore.js_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h3><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><p>&lt;!–￼50–&gt;</p><blockquote class="pullquote [class]"><p>content</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## jsFiddle</span><br><span class="line"></span><br><span class="line">在文章中嵌入 jsFiddle。</span><br></pre></td></tr></table></figure><iframe scrolling="no" width="[width]" height="[height]" src="//jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" allowfullscreen></iframe><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Gist</span><br><span class="line"></span><br><span class="line">在文章中嵌入 Gist。</span><br></pre></td></tr></table></figure><script src="//gist.github.com/gist_id.js?file=[filename]"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## iframe</span><br><span class="line"></span><br><span class="line">在文章中插入 iframe。</span><br></pre></td></tr></table></figure><iframe src="url" width="[width]" height="[height]" frameborder="0" allowfullscreen></iframe><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Image</span><br><span class="line"></span><br><span class="line">在文章中插入指定大小的图片。</span><br></pre></td></tr></table></figure><img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Link</span><br><span class="line"></span><br><span class="line">在文章中插入链接，并自动给外部链接添加 `target=&quot;_blank&quot;` 属性。</span><br></pre></td></tr></table></figure><a>text url [external] [title]</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Include Code</span><br><span class="line"></span><br><span class="line">插入 `source` 文件夹内的代码文件。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Youtube</span><br><span class="line"></span><br><span class="line">在文章中插入 Youtube 视频。</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="//www.youtube.com/embed/video_id" frameborder="0" allowfullscreen></iframe></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Vimeo</span><br><span class="line"></span><br><span class="line">在文章中插入 Vimeo 视频。</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="//player.vimeo.com/video/video_id" frameborder="0" allowfullscreen></iframe></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 引用文章</span><br><span class="line"></span><br><span class="line">引用其他文章的链接。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 引用资源</span><br><span class="line"></span><br><span class="line">引用文章的资源。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Raw</span><br><span class="line"></span><br><span class="line">如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</span><br></pre></td></tr></table></figure>content<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 资源文件夹</span><br><span class="line"></span><br><span class="line">资源（Asset）代表 `source` 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 `source/images` 文件夹中。然后通过类似于 `![](/images/image.jpg)` 的方法访问它们。</span><br><span class="line"></span><br><span class="line">## 文章资源文件夹</span><br><span class="line"></span><br><span class="line">对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 `config.yml`文件中的 `post_asset_folder` 选项设为 `true` 来打开。</span><br></pre></td></tr></table></figure><p>_config.ymlpost_asset_folder: true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当资源文件管理功能打开后，Hexo将会在你每一次通过 `hexo new [layout] &lt;title&gt;` 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</span><br><span class="line"></span><br><span class="line">## 相对路径引用的标签插件</span><br><span class="line"></span><br><span class="line">通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">比如说：当你打开文章资源文件夹功能后，你把一个 `example.jpg` 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 `![](/example.jpg)` ，它将 *不会* 出现在首页上。（但是它会在文章中按你期待的方式工作）</span><br><span class="line"></span><br><span class="line">正确的引用图片方式是使用下列的标签插件而不是 markdown ：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过这种方式，图片将会同时出现在文章和主页以及归档页中。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据文件</span><br><span class="line"></span><br><span class="line">有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 `source/_data` 内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。</span><br><span class="line"></span><br><span class="line">举例来说，在 `source/_data` 文件夹中新建 `menu.yml` 文件：</span><br></pre></td></tr></table></figure><p>Home: /Gallery: /gallery/Archives: /archives/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">您就能在模板中使用这些资料：</span><br></pre></td></tr></table></figure><p>&lt;% for (var link in site.data.menu) { %&gt;  <a href="<%= site.data.menu[link] %>"> &lt;%= link %&gt; </a>&lt;% } %&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">渲染结果如下 :</span><br></pre></td></tr></table></figure><p><a href="/"> Home </a><a href="/gallery/"> Gallery </a><a href="/archives/"> Archives </a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 服务器</span><br><span class="line"></span><br><span class="line">## [hexo-server](https://github.com/hexojs/hexo-server)</span><br><span class="line"></span><br><span class="line">Hexo 3.0 把服务器独立成了个别模块，您必须先安装 [hexo-server](https://github.com/hexojs/hexo-server) 才能使用。</span><br></pre></td></tr></table></figure><p>$ npm install hexo-server –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装完成后，输入以下命令以启动服务器，您的网站会在 `http://localhost:4000` 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br></pre></td></tr></table></figure><p>$ hexo server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果您想要更改端口，或是在执行时遇到了 `EADDRINUSE` 错误，可以在执行时使用 `-p` 选项指定其他端口，如下：</span><br></pre></td></tr></table></figure><p>$ hexo server -p 5000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 静态模式</span><br><span class="line"></span><br><span class="line">在静态模式下，服务器只处理 `public` 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 `hexo generate`，此模式通常用于生产环境（production mode）下。</span><br></pre></td></tr></table></figure><p>$ hexo server -s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 自定义 IP</span><br><span class="line"></span><br><span class="line">服务器默认运行在 `0.0.0.0`，您可以覆盖默认的 IP 设置，如下：</span><br></pre></td></tr></table></figure><p>$ hexo server -i 192.168.1.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的`127.0.0.1`外，通常还有一个`192.168.*.*`的局域网IP，如果像上面那样使用`-i`参数，就不能用`127.0.0.1`来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为`-i`参数的值，那么就无法通过公网来访问站点。</span><br><span class="line"></span><br><span class="line">## Pow</span><br><span class="line"></span><br><span class="line">[Pow](http://pow.cx/) 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</span><br><span class="line"></span><br><span class="line">### 安装</span><br></pre></td></tr></table></figure><p>$ curl get.pow.cx | sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 设置</span><br><span class="line"></span><br><span class="line">在 `~/.pow` 文件夹建立链接（symlink）。</span><br></pre></td></tr></table></figure><p>$ cd ~/.pow$ ln -s /path/to/myapp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">您的网站将会在 `http://myapp.dev` 下运行，网址根据链接名称而定。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 生成文件</span><br><span class="line"></span><br><span class="line">使用 Hexo 生成静态文件快速而且简单。</span><br></pre></td></tr></table></figure><p>$ hexo generate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 监视文件变动</span><br><span class="line"></span><br><span class="line">Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</span><br></pre></td></tr></table></figure><p>$ hexo generate –watch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 完成后部署</span><br><span class="line"></span><br><span class="line">您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</span><br></pre></td></tr></table></figure><p>$ hexo generate –deploy$ hexo deploy –generate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 简写</span><br><span class="line">&gt;</span><br><span class="line">&gt; 上面两个命令可以简写为</span><br><span class="line">&gt; $ hexo g -d</span><br><span class="line">&gt; $ hexo d -g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 部署</span><br><span class="line"></span><br><span class="line">Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</span><br></pre></td></tr></table></figure><p>$ hexo deploy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在开始之前，您必须先在 `_config.yml` 中修改参数，一个正确的部署配置中至少要有 `type` 参数，例如：</span><br></pre></td></tr></table></figure><p>deploy:  type: git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</span><br></pre></td></tr></table></figure><p>deploy:- type: git  repo:- type: heroku  repo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 缩进</span><br><span class="line">&gt;</span><br><span class="line">&gt; YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</span><br><span class="line"></span><br><span class="line">## Git</span><br><span class="line"></span><br><span class="line">安装 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)。</span><br></pre></td></tr></table></figure><p>$ npm install hexo-deployer-git –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改配置。</span><br></pre></td></tr></table></figure><p>deploy:  type: git  repo: <repository url> #<a href="https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io" target="_blank" rel="noopener">https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</a>  branch: [branch] #published  message: [message]</repository></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 参数      | 描述                                                         |</span><br><span class="line">| :-------- | :----------------------------------------------------------- |</span><br><span class="line">| `repo`    | 库（Repository）地址                                         |</span><br><span class="line">| `branch`  | 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 |</span><br><span class="line">| `message` | 自定义提交信息 (默认为 `Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;`) |</span><br><span class="line"></span><br><span class="line">生成站点文件并推送至远程库。执行`hexo clean &amp;&amp; hexo deploy`命令。前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。（如果您的Hexo是局部安装，则需要执行`./node_modules/.bin/hexo clean &amp;&amp; ./node_modules/.bin/hexo deploy`。）</span><br><span class="line"></span><br><span class="line">登入 Github/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为`_config.yml`配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。</span><br><span class="line"></span><br><span class="line">### 这一切是如何发生的？</span><br><span class="line"></span><br><span class="line">当初次新建一个库的时候，库将自动包含一个**master**分支。请在这个分支下进行写作和各种配置来完善您的网页。当执行`hexo deploy`时，Hexo会创建或更新另外一个用于部署的分支，这个分支就是`_config.yml`配置文件中指定的分支。Hexo会将生成的站点文件推送至该分支下，并且**完全覆盖**该分支下的已有内容。因此，部署分支应当不同于写作分支。（一个推荐的方式是把master作为写作分支，另外使用public分支作为部署分支。）值得注意的是，`hexo deploy`并不会对本地或远程的写作分支进行任何操作，因此依旧需要手动推送写作分支的所有改动以实现版本控制。此外，如果您的Github Pages需要使用CNAME文件**自定义域名**，请将CNAME文件置于写作分支的`source_dir`目录下，只有这样`hexo deploy`才能将CNAME文件一并推送至部署分支。</span><br><span class="line"></span><br><span class="line">## Heroku</span><br><span class="line"></span><br><span class="line">安装 [hexo-deployer-heroku](https://github.com/hexojs/hexo-deployer-heroku)。</span><br></pre></td></tr></table></figure><p>$ npm install hexo-deployer-heroku –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改配置。</span><br></pre></td></tr></table></figure><p>deploy:  type: heroku  repo: <repository url>  message: [message]</repository></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 参数      | 描述                                                         |</span><br><span class="line">| :-------- | :----------------------------------------------------------- |</span><br><span class="line">| `repo`    | Heroku 库（Repository）地址                                  |</span><br><span class="line">| `message` | 自定提交信息 (默认为 `Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;`) |</span><br><span class="line"></span><br><span class="line">## Netlify</span><br><span class="line"></span><br><span class="line">[Netlify](https://www.netlify.com/) 是一个提供网络托管的综合平台。它集持续集成（CI）CDN 自定义域名 HTTPS 持续部署（CD）等诸多功能于一身。您可以通过以下两种方式将Hexo站点部署到Netlify。</span><br><span class="line"></span><br><span class="line">首先，也是最通用的方式，就是使用Netlify提供的网页端用户界面。前往[新建一个网站页面](https://app.netlify.com/start)，选择需要关联的 Github/BitBucket/Gitlab 库，然后遵循网站提示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">另一种方式是使用Netlify提供的命令行客户端工具 [Node based CLI](https://www.netlify.com/docs/cli/) 管理和部署您的站点。</span><br><span class="line"></span><br><span class="line">此外，您还可以在项目的README中增加一个 [部署至Netlify按钮](https://www.netlify.com/docs/deploy-button/)，这样其他用户在fork或clone了您的项目之后可以方便快捷地一键部署。</span><br><span class="line"></span><br><span class="line">## Rsync</span><br><span class="line"></span><br><span class="line">安装 [hexo-deployer-rsync](https://github.com/hexojs/hexo-deployer-rsync)。</span><br></pre></td></tr></table></figure><p>$ npm install hexo-deployer-rsync –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改配置。</span><br></pre></td></tr></table></figure><p>deploy:  type: rsync  host: <host>  user: <user>  root: <root>  port: [port]  delete: [true|false]  verbose: [true|false]  ignore_errors: [true|false]</root></user></host></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 参数            | 描述                   | 默认值 |</span><br><span class="line">| :-------------- | :--------------------- | :----- |</span><br><span class="line">| `host`          | 远程主机的地址         |        |</span><br><span class="line">| `user`          | 使用者名称             |        |</span><br><span class="line">| `root`          | 远程主机的根目录       |        |</span><br><span class="line">| `port`          | 端口                   | 22     |</span><br><span class="line">| `delete`        | 删除远程主机上的旧文件 | true   |</span><br><span class="line">| `verbose`       | 显示调试信息           | true   |</span><br><span class="line">| `ignore_errors` | 忽略错误               | false  |</span><br><span class="line"></span><br><span class="line">&gt; rsync部署模块的工作方式</span><br><span class="line">&gt;</span><br><span class="line">&gt; 需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的`port`，的确是指rsync监听的端口，请确保防火墙打开了该端口。</span><br><span class="line"></span><br><span class="line">## OpenShift</span><br><span class="line"></span><br><span class="line">安装 [hexo-deployer-openshift](https://github.com/hexojs/hexo-deployer-openshift)。</span><br></pre></td></tr></table></figure><p>$ npm install hexo-deployer-openshift –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改配置。</span><br></pre></td></tr></table></figure><p>deploy:  type: openshift  repo: <repository url>  message: [message]</repository></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 参数      | 描述                                                         |</span><br><span class="line">| :-------- | :----------------------------------------------------------- |</span><br><span class="line">| `repo`    | OpenShift 库（Repository）地址                               |</span><br><span class="line">| `message` | 自定提交信息 (默认为 `Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;`) |</span><br><span class="line"></span><br><span class="line">## FTPSync</span><br><span class="line"></span><br><span class="line">安装 [hexo-deployer-ftpsync](https://github.com/hexojs/hexo-deployer-ftpsync)。</span><br></pre></td></tr></table></figure><p>$ npm install hexo-deployer-ftpsync –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改配置。</span><br></pre></td></tr></table></figure><p>deploy:  type: ftpsync  host: <host>  user: <user>  pass: <password>  remote: [remote]  port: [port]  ignore: [ignore]  connections: [connections]  verbose: [true|false]</password></user></host></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 参数          | 描述             | 默认值 |</span><br><span class="line">| :------------ | :--------------- | :----- |</span><br><span class="line">| `host`        | 远程主机的地址   |        |</span><br><span class="line">| `user`        | 使用者名称       |        |</span><br><span class="line">| `pass`        | 密码             |        |</span><br><span class="line">| `remote`      | 远程主机的根目录 | `/`    |</span><br><span class="line">| `port`        | 端口             | 21     |</span><br><span class="line">| `ignore`      | 忽略的文件或目录 |        |</span><br><span class="line">| `connections` | 使用的连接数     | 1      |</span><br><span class="line">| `verbose`     | 显示调试信息     | false  |</span><br><span class="line"></span><br><span class="line">&gt; FTP部署可能出现的问题</span><br><span class="line">&gt;</span><br><span class="line">&gt; 您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。</span><br><span class="line"></span><br><span class="line">## SFTP</span><br><span class="line"></span><br><span class="line">安装 [hexo-deployer-sftp](https://github.com/lucascaro/hexo-deployer-sftp)。</span><br></pre></td></tr></table></figure><p>$ npm install hexo-deployer-sftp –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改配置。</span><br></pre></td></tr></table></figure><p>deploy:  type: sftp  host: <host>  user: <user>  pass: <password>  remotePath: [remote path]  port: [port]  privateKey: [path/to/privateKey]  passphrase: [passphrase]  agent: [path/to/agent/socket]</password></user></host></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 参数         | 描述                        | 默认值           |</span><br><span class="line">| :----------- | :-------------------------- | :--------------- |</span><br><span class="line">| `host`       | 远程主机的地址              |                  |</span><br><span class="line">| `user`       | 使用者名称                  |                  |</span><br><span class="line">| `pass`       | 密码                        |                  |</span><br><span class="line">| `remotePath` | 远程主机的根目录            | `/`              |</span><br><span class="line">| `port`       | 端口                        | 22               |</span><br><span class="line">| `privateKey` | ssh私钥的目录地址           |                  |</span><br><span class="line">| `passphrase` | （可省略）ssh私钥的密码短语 |                  |</span><br><span class="line">| `agent`      | ssh套接字的目录地址         | `$SSH_AUTH_SOCK` |</span><br><span class="line"></span><br><span class="line">## 其他方法</span><br><span class="line"></span><br><span class="line">Hexo 生成的所有文件都放在 `public` 文件夹中，您可以将它们复制到您喜欢的地方。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 永久链接（Permalinks）</span><br><span class="line"></span><br><span class="line">您可以在 `_config.yml` 配置中调整网站的永久链接或者在每篇文章的 Front-matter 中指定。</span><br><span class="line"></span><br><span class="line">## 变量</span><br><span class="line"></span><br><span class="line">除了下列变量外，您还可使用 Front-matter 中的所有属性。</span><br><span class="line"></span><br><span class="line">| 变量          | 描述                                                       |</span><br><span class="line">| :------------ | :--------------------------------------------------------- |</span><br><span class="line">| `:year`       | 文章的发表年份（4 位数）                                   |</span><br><span class="line">| `:month`      | 文章的发表月份（2 位数）                                   |</span><br><span class="line">| `:i_month`    | 文章的发表月份（去掉开头的零）                             |</span><br><span class="line">| `:day`        | 文章的发表日期 (2 位数)                                    |</span><br><span class="line">| `:i_day`      | 文章的发表日期（去掉开头的零）                             |</span><br><span class="line">| `:title`      | 文件名称                                                   |</span><br><span class="line">| `:post_title` | 文章标题                                                   |</span><br><span class="line">| `:id`         | 文章 ID                                                    |</span><br><span class="line">| `:category`   | 分类。如果文章没有分类，则是 `default_category` 配置信息。 |</span><br><span class="line"></span><br><span class="line">您可在 `permalink_defaults` 参数下调整永久链接中各变量的默认值：</span><br></pre></td></tr></table></figure><p>permalink_defaults:  lang: en</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 示例</span><br><span class="line"></span><br><span class="line">假设 `source/_posts` 文件夹中有个 `hello-world.md`，包含以下内容：</span><br></pre></td></tr></table></figure><p>title: Hello Worlddate: 2013-07-14 17:01:34categories:- foo- bar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 参数                            | 结果                        |</span><br><span class="line">| :------------------------------ | :-------------------------- |</span><br><span class="line">| `:year/:month/:day/:title/`     | 2013/07/14/hello-world      |</span><br><span class="line">| `:year-:month-:day-:title.html` | 2013-07-14-hello-world.html |</span><br><span class="line">| `:category/:title`              | foo/bar/hello-world         |</span><br><span class="line"></span><br><span class="line">## 多语种支持</span><br><span class="line"></span><br><span class="line">若要建立一个多语种的网站，您可修改 `new_post_name` 和 `permalink` 参数，如下：</span><br></pre></td></tr></table></figure><p>new_post_name: :lang/:title.mdpermalink: :lang/:title/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当您建立新文章时，文章会被储存到：</span><br><span class="line"></span><br><span class="line">```sheel</span><br><span class="line">$ hexo new &quot;Hello World&quot; --lang tw# =&gt; source/_posts/tw/Hello-World.md</span><br></pre></td></tr></table></figure><p>而网址会是：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:4000/tw/hello-world/</span></span><br></pre></td></tr></table></figure><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.├── _config.yml├── languages├── layout├── scripts└── source</span><br></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>主题的配置文件。修改时会自动更新，无需重启服务器。</p><h3 id="languages"><a href="#languages" class="headerlink" title="languages"></a>languages</h3><p>语言文件夹。请参见 <a href="https://hexo.io/zh-cn/docs/internationalization" target="_blank" rel="noopener">国际化 (i18n)</a>。</p><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <a href="http://paularmstrong.github.com/swig/" target="_blank" rel="noopener">Swig</a> 模板引擎，您可以另外安装插件来获得 <a href="https://github.com/hexojs/hexo-renderer-ejs" target="_blank" rel="noopener">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml" target="_blank" rel="noopener">Haml</a> 或 <a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="noopener">Jade</a> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layout.ejs   - 使用 EJSlayout.swig  - 使用 Swig</span><br></pre></td></tr></table></figure><p>您可参考 <a href="https://hexo.io/zh-cn/docs/templates" target="_blank" rel="noopener">模板</a> 以获得更多信息。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 <a href="https://hexo.io/zh-cn/docs/plugins" target="_blank" rel="noopener">插件</a> 以获得更多信息。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。</p><p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>当您完成主题后，可以考虑将它发布到 <a href="https://hexo.io/themes" target="_blank" rel="noopener">主题列表</a>，让更多人能够使用您的主题。在发布前建议先进行 <a href="https://github.com/hexojs/hexo-theme-unit-test" target="_blank" rel="noopener">主题单元测试</a>，确保每一项功能都能正常使用。发布主题的步骤和 <a href="https://hexo.io/zh-cn/docs/contributing.html#更新文档" target="_blank" rel="noopener">更新文档</a> 非常类似。</p><ol><li><p>Fork <a href="https://github.com/hexojs/site" target="_blank" rel="noopener">hexojs/site</a></p></li><li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/&lt;username&gt;/site.git$ cd site$ npm install</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>source/_data/themes.yml</code>，在文件中新增您的主题，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- name: landscape  description: A brand new default theme for Hexo.  link: https://github.com/hexojs/hexo-theme-landscape  preview: http://hexo.io/hexo-theme-landscape  tags:    - official    - responsive    - widget    - two_column    - one_column</span><br></pre></td></tr></table></figure></li><li><p>在 <code>source/themes/screenshots</code> 新增同名的截图档案，图片必须为 800x500 的 PNG 文件。</p></li><li><p>推送（push）分支。</p></li><li><p>建立一个新的合并申请（pull request）并描述改动。</p></li></ol><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 <code>index</code> 模板，以下是各页面相对应的模板名称：</p><table><thead><tr><th align="left">模板</th><th align="left">用途</th><th align="left">回退</th></tr></thead><tbody><tr><td align="left"><code>index</code></td><td align="left">首页</td><td align="left"></td></tr><tr><td align="left"><code>post</code></td><td align="left">文章</td><td align="left"><code>index</code></td></tr><tr><td align="left"><code>page</code></td><td align="left">分页</td><td align="left"><code>index</code></td></tr><tr><td align="left"><code>archive</code></td><td align="left">归档</td><td align="left"><code>index</code></td></tr><tr><td align="left"><code>category</code></td><td align="left">分类归档</td><td align="left"><code>archive</code></td></tr><tr><td align="left"><code>tag</code></td><td align="left">标签归档</td><td align="left"><code>archive</code></td></tr></tbody></table><h2 id="布局（Layout）-1"><a href="#布局（Layout）-1" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 <code>body</code> 变量的内容，如此一来模板的内容才会被显示，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.ejsindex</span><br><span class="line">layout.ejs&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;index&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>每个模板都默认使用 <code>layout</code> 布局，您可在 front-matter 指定其他布局，或是设为 <code>false</code> 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。</p><h2 id="局部模版（Partial）"><a href="#局部模版（Partial）" class="headerlink" title="局部模版（Partial）"></a>局部模版（Partial）</h2><p>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">partial/header.ejs&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</span><br><span class="line">index.ejs&lt;%- partial(&apos;partial/header&apos;) %&gt;&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>您可以在局部模板中指定局部变量并使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">partial/header.ejs&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title&gt;&lt;/h1&gt;</span><br><span class="line">index.ejs&lt;%- partial(&apos;partial/header&apos;, &#123;title: &apos;Hello World&apos;&#125;) %&gt;&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。</p><p>本功能借鉴于 <a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching" target="_blank" rel="noopener">Ruby on Rails</a>，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p><p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;&#125;);</span><br></pre></td></tr></table></figure><p>如果您使用局部模板的话，可以更简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&apos;header&apos;, &#123;&#125;, &#123;cache: true&#125;);</span><br></pre></td></tr></table></figure><p>但是，如果您开启了 <code>relative_link</code> 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>site</code></td><td align="left"><a href="https://hexo.io/zh-cn/docs/variables#网站变量" target="_blank" rel="noopener">网站变量</a></td></tr><tr><td align="left"><code>page</code></td><td align="left">针对该页面的内容以及 front-matter 所设定的变量。</td></tr><tr><td align="left"><code>config</code></td><td align="left">网站配置</td></tr><tr><td align="left"><code>theme</code></td><td align="left">主题配置。继承自网站配置。</td></tr><tr><td align="left"><code>_</code> (单下划线)</td><td align="left"><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> 函数库</td></tr><tr><td align="left"><code>path</code></td><td align="left">当前页面的路径（不含根路径）</td></tr><tr><td align="left"><code>url</code></td><td align="left">当前页面的完整网址</td></tr><tr><td align="left"><code>env</code></td><td align="left">环境变量</td></tr></tbody></table><h3 id="网站变量"><a href="#网站变量" class="headerlink" title="网站变量"></a>网站变量</h3><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>site.posts</code></td><td align="left">所有文章</td></tr><tr><td align="left"><code>site.pages</code></td><td align="left">所有分页</td></tr><tr><td align="left"><code>site.categories</code></td><td align="left">所有分类</td></tr><tr><td align="left"><code>site.tags</code></td><td align="left">所有标签</td></tr></tbody></table><h3 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h3><p><strong>页面（page）</strong></p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>page.title</code></td><td align="left">页面标题</td></tr><tr><td align="left"><code>page.date</code></td><td align="left">页面建立日期（<a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 对象）</td></tr><tr><td align="left"><code>page.updated</code></td><td align="left">页面更新日期（<a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 对象）</td></tr><tr><td align="left"><code>page.comments</code></td><td align="left">留言是否开启</td></tr><tr><td align="left"><code>page.layout</code></td><td align="left">布局名称</td></tr><tr><td align="left"><code>page.content</code></td><td align="left">页面的完整内容</td></tr><tr><td align="left"><code>page.excerpt</code></td><td align="left">页面摘要</td></tr><tr><td align="left"><code>page.more</code></td><td align="left">除了页面摘要的其余内容</td></tr><tr><td align="left"><code>page.source</code></td><td align="left">页面原始路径</td></tr><tr><td align="left"><code>page.full_source</code></td><td align="left">页面的完整原始路径</td></tr><tr><td align="left"><code>page.path</code></td><td align="left">页面网址（不含根路径）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td></tr><tr><td align="left"><code>page.permalink</code></td><td align="left">页面的完整网址</td></tr><tr><td align="left"><code>page.prev</code></td><td align="left">上一个页面。如果此为第一个页面则为 <code>null</code>。</td></tr><tr><td align="left"><code>page.next</code></td><td align="left">下一个页面。如果此为最后一个页面则为 <code>null</code>。</td></tr><tr><td align="left"><code>page.raw</code></td><td align="left">文章的原始内容</td></tr><tr><td align="left"><code>page.photos</code></td><td align="left">文章的照片（用于相簿）</td></tr><tr><td align="left"><code>page.link</code></td><td align="left">文章的外部链接（用于链接文章）</td></tr></tbody></table><p><strong>文章 (post):</strong> 和 <code>page</code> 布局类似，但是添加了下列变量。</p><table><thead><tr><th align="left">Variable</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>page.published</code></td><td align="left">如果该文章已发布则为True</td></tr><tr><td align="left"><code>page.categories</code></td><td align="left">该文章的所有分类</td></tr><tr><td align="left"><code>page.tags</code></td><td align="left">该文章的所有标签</td></tr></tbody></table><p><strong>首页（index）</strong></p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>page.per_page</code></td><td align="left">每页显示的文章数量</td></tr><tr><td align="left"><code>page.total</code></td><td align="left">总文章数</td></tr><tr><td align="left"><code>page.current</code></td><td align="left">目前页数</td></tr><tr><td align="left"><code>page.current_url</code></td><td align="left">目前分页的网址</td></tr><tr><td align="left"><code>page.posts</code></td><td align="left">本页文章</td></tr><tr><td align="left"><code>page.prev</code></td><td align="left">上一页的页数。如果此页是第一页的话则为 <code>0</code>。</td></tr><tr><td align="left"><code>page.prev_link</code></td><td align="left">上一页的网址。如果此页是第一页的话则为 <code>&#39;&#39;</code>。</td></tr><tr><td align="left"><code>page.next</code></td><td align="left">下一页的页数。如果此页是最后一页的话则为 <code>0</code>。</td></tr><tr><td align="left"><code>page.next_link</code></td><td align="left">下一页的网址。如果此页是最后一页的话则为 <code>&#39;&#39;</code>。</td></tr><tr><td align="left"><code>page.path</code></td><td align="left">当前页面的路径（不含根目录）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td></tr></tbody></table><p><strong>归档 (archive)</strong>：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>page.archive</code></td><td align="left">等于 <code>true</code></td></tr><tr><td align="left"><code>page.year</code></td><td align="left">年份归档 (4位)</td></tr><tr><td align="left"><code>page.month</code></td><td align="left">月份归档 (没有前导零的2位数)</td></tr></tbody></table><p><strong>分类 (category)</strong>：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>page.category</code></td><td align="left">分类名称</td></tr></tbody></table><p><strong>标签 (tag)</strong>：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>page.tag</code></td><td align="left">标签名称</td></tr></tbody></table><h1 id="辅助函数（Helpers）"><a href="#辅助函数（Helpers）" class="headerlink" title="辅助函数（Helpers）"></a>辅助函数（Helpers）</h1><p>辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。</p><h2 id="网址-1"><a href="#网址-1" class="headerlink" title="网址"></a>网址</h2><h3 id="url-for"><a href="#url-for" class="headerlink" title="url_for"></a>url_for</h3><p>在路径前加上根路径，从 Hexo 2.7 开始您应该使用此函数而不是 <code>config.root + path</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- url_for(path) %&gt;</span><br></pre></td></tr></table></figure><h3 id="relative-url"><a href="#relative-url" class="headerlink" title="relative_url"></a>relative_url</h3><p>取得与 <code>from</code> 相对的 <code>to</code> 路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- relative_url(from, to) %&gt;</span><br></pre></td></tr></table></figure><h3 id="gravatar"><a href="#gravatar" class="headerlink" title="gravatar"></a>gravatar</h3><p>插入 Gravatar 图片。<br>如果你不指定 <code>options</code> 参数，将会应用默认参数。否则，你可以将其设置为一个数字，这个数字将会作为 Gravatar 的大小参数。最后，如果你设置它一个对象，它将会被转换为 Gravatar 的一个查询字符串参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- gravatar(email, [options]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- gravatar(&apos;a@abc.com&apos;) %&gt;// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787&lt;%- gravatar(&apos;a@abc.com&apos;, 40) %&gt;// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&lt;%- gravatar(&apos;a@abc.com&apos; &#123;s: 40, d: &apos;https://via.placeholder.com/150&apos;&#125;) %&gt;// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&amp;d=https%3A%2F%2Fvia.placeholder.com%2F150</span><br></pre></td></tr></table></figure><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>载入 CSS 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.css</code> 扩展名的话，也会自动加上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- css(path, ...) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- css(&apos;style.css&apos;) %&gt;// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;&lt;%- css([&apos;style.css&apos;, &apos;screen.css&apos;]) %&gt;// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>载入 JavaScript 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.js</code> 扩展名的话，也会自动加上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js(path, ...) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js(&apos;script.js&apos;) %&gt;// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;&lt;%- js([&apos;script.js&apos;, &apos;gallery.js&apos;]) %&gt;// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="link-to"><a href="#link-to" class="headerlink" title="link_to"></a>link_to</h3><p>插入链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- link_to(path, [text], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>external</code></td><td align="left">在新视窗打开链接</td><td align="left">false</td></tr><tr><td align="left"><code>class</code></td><td align="left">Class 名称</td><td align="left"></td></tr><tr><td align="left"><code>id</code></td><td align="left">ID</td><td align="left"></td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- link_to(&apos;http://www.google.com&apos;) %&gt;// &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;) %&gt;// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;, &#123;external: true&#125;) %&gt;// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="mail-to"><a href="#mail-to" class="headerlink" title="mail_to"></a>mail_to</h3><p>插入电子邮箱链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- mail_to(path, [text], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>class</code></td><td align="left">Class 名称</td></tr><tr><td align="left"><code>id</code></td><td align="left">ID</td></tr><tr><td align="left"><code>subject</code></td><td align="left">邮件主题</td></tr><tr><td align="left"><code>cc</code></td><td align="left">抄送（CC）</td></tr><tr><td align="left"><code>bcc</code></td><td align="left">密送（BCC）</td></tr><tr><td align="left"><code>body</code></td><td align="left">邮件内容</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- mail_to(&apos;a@abc.com&apos;) %&gt;// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;&lt;%- mail_to(&apos;a@abc.com&apos;, &apos;Email&apos;) %&gt;// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="image-tag"><a href="#image-tag" class="headerlink" title="image_tag"></a>image_tag</h3><p>插入图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- image_tag(path, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>alt</code></td><td align="left">图片的替代文字</td></tr><tr><td align="left"><code>class</code></td><td align="left">Class 名称</td></tr><tr><td align="left"><code>id</code></td><td align="left">ID</td></tr><tr><td align="left"><code>width</code></td><td align="left">图片宽度</td></tr><tr><td align="left"><code>height</code></td><td align="left">图片高度</td></tr></tbody></table><h3 id="favicon-tag"><a href="#favicon-tag" class="headerlink" title="favicon_tag"></a>favicon_tag</h3><p>插入 favicon。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- favicon_tag(path) %&gt;</span><br></pre></td></tr></table></figure><h3 id="feed-tag"><a href="#feed-tag" class="headerlink" title="feed_tag"></a>feed_tag</h3><p>插入 feed 链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- feed_tag(path, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">Feed 标题</td><td align="left"></td></tr><tr><td align="left"><code>type</code></td><td align="left">Feed 类型</td><td align="left">atom</td></tr></tbody></table><h2 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h2><h3 id="is-current"><a href="#is-current" class="headerlink" title="is_current"></a>is_current</h3><p>检查 <code>path</code> 是否符合目前页面的网址。开启 <code>strict</code> 选项启用严格比对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_current(path, [strict]) %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-home"><a href="#is-home" class="headerlink" title="is_home"></a>is_home</h3><p>检查目前是否为首页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_home() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-post"><a href="#is-post" class="headerlink" title="is_post"></a>is_post</h3><p>检查目前是否为文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_post() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-archive"><a href="#is-archive" class="headerlink" title="is_archive"></a>is_archive</h3><p>检查目前是否为存档页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_archive() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-year"><a href="#is-year" class="headerlink" title="is_year"></a>is_year</h3><p>检查目前是否为年度归档页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_year() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-month"><a href="#is-month" class="headerlink" title="is_month"></a>is_month</h3><p>检查目前是否为月度归档页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_month() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-category"><a href="#is-category" class="headerlink" title="is_category"></a>is_category</h3><p>检查目前是否为分类归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定分类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_category() %&gt;&lt;%- is_category(&apos;hobby&apos;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-tag"><a href="#is-tag" class="headerlink" title="is_tag"></a>is_tag</h3><p>检查目前是否为标签归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_tag() %&gt;&lt;%- is_tag(&apos;hobby&apos;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>清除字符串开头和结尾的空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- trim(string) %&gt;</span><br></pre></td></tr></table></figure><h3 id="strip-html"><a href="#strip-html" class="headerlink" title="strip_html"></a>strip_html</h3><p>清除字符串中的 HTML 标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- strip_html(string) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- strip_html(&apos;It&apos;s not &lt;b&gt;important&lt;/b&gt; anymore!&apos;) %&gt;// It&apos;s not important anymore!</span><br></pre></td></tr></table></figure><h3 id="titlecase"><a href="#titlecase" class="headerlink" title="titlecase"></a>titlecase</h3><p>把字符串转换为正确的 Title case。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- titlecase(string) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- titlecase(&apos;this is an apple&apos;) %&gt;# This is an Apple</span><br></pre></td></tr></table></figure><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>使用 Markdown 解析字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- markdown(str) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- markdown(&apos;make me **strong**&apos;) %&gt;// make me &lt;strong&gt;strong&lt;/strong&gt;</span><br></pre></td></tr></table></figure><h3 id="render-1"><a href="#render-1" class="headerlink" title="render"></a>render</h3><p>解析字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- render(str, engine, [options]) %&gt;</span><br></pre></td></tr></table></figure><h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word_wrap"></a>word_wrap</h3><p>使每行的字符串长度不超过 <code>length</code>。<code>length</code> 预设为 80。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- word_wrap(str, [length]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- word_wrap(&apos;Once upon a time&apos;, 8) %&gt;// Once upon\n a time</span><br></pre></td></tr></table></figure><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>移除超过 <code>length</code> 长度的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- truncate(text, length) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, &#123;length: 17&#125;) %&gt;// Once upon a ti...&lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, &#123;length: 17, separator: &apos; &apos;&#125;) %&gt;// Once upon a...&lt;%- truncate(&apos;And they found that many people were sleeping better.&apos;, &#123;length: 25, omission: &apos;... (continued)&apos;&#125;) %&gt;// And they f... (continued)</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h3><p>载入其他模板文件，您可在 <code>locals</code> 设定区域变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(layout, [locals], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>cache</code></td><td align="left">缓存（使用 Fragment cache）</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>only</code></td><td align="left">限制局部变量。在模板中只能使用 <code>locals</code> 中设定的变量。</td><td align="left"><code>false</code></td></tr></tbody></table><h3 id="fragment-cache"><a href="#fragment-cache" class="headerlink" title="fragment_cache"></a>fragment_cache</h3><p>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(id, fn);</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;&#125;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>插入格式化的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 对象。<code>format</code> 默认为 <code>date_format</code> 配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date(Date.now()) %&gt;// 2013-01-01&lt;%- date(Date.now(), &apos;YYYY/M/D&apos;) %&gt;// Jan 1 2013</span><br></pre></td></tr></table></figure><h3 id="date-xml"><a href="#date-xml" class="headerlink" title="date_xml"></a>date_xml</h3><p>插入 XML 格式的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date_xml(date) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date_xml(Date.now()) %&gt;// 2013-01-01T00:00:00.000Z</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>插入格式化的时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 对象。<code>format</code> 默认为 <code>time_format</code> 配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- time(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- time(Date.now()) %&gt;// 13:05:12&lt;%- time(Date.now(), &apos;h:mm:ss a&apos;) %&gt;// 1:05:12 pm</span><br></pre></td></tr></table></figure><h3 id="full-date"><a href="#full-date" class="headerlink" title="full_date"></a>full_date</h3><p>插入格式化的日期和时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 对象。<code>format</code>默认为 <code>date_format + time_format</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- full_date(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- full_date(new Date()) %&gt;// Jan 1, 2013 0:00:00&lt;%- full_date(new Date(), &apos;dddd, MMMM Do YYYY, h:mm:ss a&apos;) %&gt;// Tuesday, January 1st 2013, 12:00:00 am</span><br></pre></td></tr></table></figure><h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h3><p><a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 函数库。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="list-categories"><a href="#list-categories" class="headerlink" title="list_categories"></a>list_categories</h3><p>插入分类列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_categories([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>orderby</code></td><td align="left">分类排列方式</td><td align="left">name</td></tr><tr><td align="left"><code>order</code></td><td align="left">分类排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td align="left">1</td></tr><tr><td align="left"><code>show_count</code></td><td align="left">显示每个分类的文章总数</td><td align="left">true</td></tr><tr><td align="left"><code>style</code></td><td align="left">分类列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td align="left">list</td></tr><tr><td align="left"><code>separator</code></td><td align="left">分类间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td align="left">,</td></tr><tr><td align="left"><code>depth</code></td><td align="left">要显示的分类层级。<code>0</code> 显示所有层级的分类；<code>-1</code> 和 <code>0</code> 很类似，但是显示不分层级；<code>1</code> 只显示第一层的分类。</td><td align="left">0</td></tr><tr><td align="left"><code>class</code></td><td align="left">分类列表的 class 名称。</td><td align="left">category</td></tr><tr><td align="left"><code>transform</code></td><td align="left">改变分类名称显示方法的函数</td><td align="left"></td></tr></tbody></table><h3 id="list-tags"><a href="#list-tags" class="headerlink" title="list_tags"></a>list_tags</h3><p>插入标签列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_tags([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">选项</th><th align="left">描述</th><th align="left">预设值</th></tr></thead><tbody><tr><td align="left"><code>orderby</code></td><td align="left">标签排列方式</td><td align="left">name</td></tr><tr><td align="left"><code>order</code></td><td align="left">标签排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td align="left">1</td></tr><tr><td align="left"><code>show_count</code></td><td align="left">显示每个标签的文章总数</td><td align="left">true</td></tr><tr><td align="left"><code>style</code></td><td align="left">标签列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td align="left">list</td></tr><tr><td align="left"><code>separator</code></td><td align="left">标签间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td align="left">,</td></tr><tr><td align="left"><code>class</code></td><td align="left">标签列表的 class 名称。</td><td align="left">tag</td></tr><tr><td align="left"><code>transform</code></td><td align="left">改变标签名称显示方法的函数</td><td align="left"></td></tr><tr><td align="left"><code>amount</code></td><td align="left">要显示的标签数量（0 = 无限制）</td><td align="left">0</td></tr></tbody></table><h3 id="list-archives"><a href="#list-archives" class="headerlink" title="list_archives"></a>list_archives</h3><p>插入归档列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_archives([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>type</code></td><td align="left">类型。此设定可为 <code>yearly</code> 或 <code>monthly</code>。</td><td align="left">monthly</td></tr><tr><td align="left"><code>order</code></td><td align="left">排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td align="left">1</td></tr><tr><td align="left"><code>show_count</code></td><td align="left">显示每个归档的文章总数</td><td align="left">true</td></tr><tr><td align="left"><code>format</code></td><td align="left">日期格式</td><td align="left">MMMM YYYY</td></tr><tr><td align="left"><code>style</code></td><td align="left">归档列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td align="left">list</td></tr><tr><td align="left"><code>separator</code></td><td align="left">归档间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td align="left">,</td></tr><tr><td align="left"><code>class</code></td><td align="left">归档列表的 class 名称。</td><td align="left">archive</td></tr><tr><td align="left"><code>transform</code></td><td align="left">改变归档名称显示方法的函数</td><td align="left"></td></tr></tbody></table><h3 id="list-posts"><a href="#list-posts" class="headerlink" title="list_posts"></a>list_posts</h3><p>插入文章列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_posts([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>orderby</code></td><td align="left">文章排列方式</td><td align="left">date</td></tr><tr><td align="left"><code>order</code></td><td align="left">文章排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td align="left">-1</td></tr><tr><td align="left"><code>style</code></td><td align="left">文章列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td align="left">list</td></tr><tr><td align="left"><code>separator</code></td><td align="left">文章间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td align="left">,</td></tr><tr><td align="left"><code>class</code></td><td align="left">文章列表的 class 名称。</td><td align="left">post</td></tr><tr><td align="left"><code>amount</code></td><td align="left">要显示的文章数量（0 = 无限制）</td><td align="left">6</td></tr><tr><td align="left"><code>transform</code></td><td align="left">改变文章名称显示方法的函数</td><td align="left"></td></tr></tbody></table><h3 id="tagcloud"><a href="#tagcloud" class="headerlink" title="tagcloud"></a>tagcloud</h3><p>插入标签云。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- tagcloud([tags], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>min_font</code></td><td align="left">最小字体尺寸</td><td align="left">10</td></tr><tr><td align="left"><code>max_font</code></td><td align="left">最大字体尺寸</td><td align="left">20</td></tr><tr><td align="left"><code>unit</code></td><td align="left">字体尺寸的单位</td><td align="left">px</td></tr><tr><td align="left"><code>amount</code></td><td align="left">标签总量</td><td align="left">40</td></tr><tr><td align="left"><code>orderby</code></td><td align="left">标签排列方式</td><td align="left">name</td></tr><tr><td align="left"><code>order</code></td><td align="left">标签排列顺序。<code>1</code>, <code>sac</code> 升序；<code>-1</code>, <code>desc</code> 降序</td><td align="left">1</td></tr><tr><td align="left"><code>color</code></td><td align="left">使用颜色</td><td align="left">false</td></tr><tr><td align="left"><code>start_color</code></td><td align="left">开始的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 <a href="http://www.w3.org/TR/css3-color/#svg-color" target="_blank" rel="noopener">颜色关键字</a>。此变量仅在 <code>color</code> 参数开启时才有用。</td><td align="left"></td></tr><tr><td align="left"><code>end_color</code></td><td align="left">结束的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 <a href="http://www.w3.org/TR/css3-color/#svg-color" target="_blank" rel="noopener">颜色关键字</a>。此变量仅在 <code>color</code> 参数开启时才有用。</td><td align="left"></td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="paginator"><a href="#paginator" class="headerlink" title="paginator"></a>paginator</h3><p>插入分页链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- paginator(options) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>base</code></td><td align="left">基础网址</td><td align="left">/</td></tr><tr><td align="left"><code>format</code></td><td align="left">网址格式</td><td align="left">page/%d/</td></tr><tr><td align="left"><code>total</code></td><td align="left">分页总数</td><td align="left">1</td></tr><tr><td align="left"><code>current</code></td><td align="left">目前页数</td><td align="left">0</td></tr><tr><td align="left"><code>prev_text</code></td><td align="left">上一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td><td align="left">Prev</td></tr><tr><td align="left"><code>next_text</code></td><td align="left">下一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td><td align="left">Next</td></tr><tr><td align="left"><code>space</code></td><td align="left">空白文字</td><td align="left">…</td></tr><tr><td align="left"><code>prev_next</code></td><td align="left">显示上一页和下一页的链接</td><td align="left">true</td></tr><tr><td align="left"><code>end_size</code></td><td align="left">显示于两侧的页数</td><td align="left">1</td></tr><tr><td align="left"><code>mid_size</code></td><td align="left">显示于中间的页数</td><td align="left">2</td></tr><tr><td align="left"><code>show_all</code></td><td align="left">显示所有页数。如果开启此参数的话，<code>end_size</code> 和 <code>mid_size</code> 就没用了。</td><td align="left">false</td></tr></tbody></table><h3 id="search-form"><a href="#search-form" class="headerlink" title="search_form"></a>search_form</h3><p>插入 Google 搜索框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- search_form(options) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>class</code></td><td align="left">表单的 class name</td><td align="left">search-form</td></tr><tr><td align="left"><code>text</code></td><td align="left">搜索提示文字</td><td align="left">Search</td></tr><tr><td align="left"><code>button</code></td><td align="left">显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。</td><td align="left">false</td></tr></tbody></table><h3 id="number-format"><a href="#number-format" class="headerlink" title="number_format"></a>number_format</h3><p>格式化数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- number_format(number, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>precision</code></td><td align="left">数字精度。此选项可为 <code>false</code> 或非负整数。</td><td align="left">false</td></tr><tr><td align="left"><code>delimiter</code></td><td align="left">千位数分隔符号</td><td align="left">,</td></tr><tr><td align="left"><code>separator</code></td><td align="left">整数和小数之间的分隔符号</td><td align="left">.</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;// 12,345.68&lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;// 12,345.6700&lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;// 12,345&lt;%- number_format(12345.67, &#123;delimiter: &apos;&apos;&#125;) %&gt;// 12345.67&lt;%- number_format(12345.67, &#123;separator: &apos;/&apos;&#125;) %&gt;// 12,345/67</span><br></pre></td></tr></table></figure><h3 id="open-graph"><a href="#open-graph" class="headerlink" title="open_graph"></a>open_graph</h3><p>插入 open graph 资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- open_graph([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">页面标题 (<code>og:title</code>)</td><td align="left"><code>page.title</code></td></tr><tr><td align="left"><code>type</code></td><td align="left">页面类型 (<code>og:type</code>)</td><td align="left">blog</td></tr><tr><td align="left"><code>url</code></td><td align="left">页面网址 (<code>og:url</code>)</td><td align="left"><code>url</code></td></tr><tr><td align="left"><code>image</code></td><td align="left">页面图片 (<code>og:image</code>)</td><td align="left">内容中的图片</td></tr><tr><td align="left"><code>site_name</code></td><td align="left">网站名称 (<code>og:site_name</code>)</td><td align="left"><code>config.title</code></td></tr><tr><td align="left"><code>description</code></td><td align="left">页面描述 (<code>og:desription</code>)</td><td align="left">内容摘要或前 200 字</td></tr><tr><td align="left"><code>twitter_card</code></td><td align="left">Twitter 卡片类型 (<code>twitter:card</code>)</td><td align="left">summary</td></tr><tr><td align="left"><code>twitter_id</code></td><td align="left">Twitter ID (<code>twitter:creator</code>)</td><td align="left"></td></tr><tr><td align="left"><code>twitter_site</code></td><td align="left">Twitter 网站 (<code>twitter:site</code>)</td><td align="left"></td></tr><tr><td align="left"><code>google_plus</code></td><td align="left">Google+ 个人资料链接</td><td align="left"></td></tr><tr><td align="left"><code>fb_admins</code></td><td align="left">Facebook 管理者 ID</td><td align="left"></td></tr><tr><td align="left"><code>fb_app_id</code></td><td align="left">Facebook 应用程序 ID</td><td align="left"></td></tr></tbody></table><h3 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h3><p>解析内容中的标题标签 (h1~h6) 并插入目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- toc(str, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>class</code></td><td align="left">Class 名称</td><td align="left">toc</td></tr><tr><td align="left"><code>list_number</code></td><td align="left">显示编号</td><td align="left">true</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- toc(page.content) %&gt;</span><br></pre></td></tr></table></figure><h1 id="国际化（i18n）"><a href="#国际化（i18n）" class="headerlink" title="国际化（i18n）"></a>国际化（i18n）</h1><p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。请先在 <code>_config.yml</code> 中调整 <code>language</code> 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-twlanguage: - zh-tw- en</span><br></pre></td></tr></table></figure><h3 id="语言文件"><a href="#语言文件" class="headerlink" title="语言文件"></a>语言文件</h3><p>语言文件可以使用 YAML 或 JSON 编写，并放在主题文件夹中的 <code>languages</code> 文件夹。您可以在语言文件中使用 <a href="https://github.com/alexei/sprintf.js" target="_blank" rel="noopener">printf 格式</a>。</p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><p>在模板中，透过 <code>__</code> 或 <code>_p</code> 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">en.ymlindex:  title: Home  add: Add  video:    zero: No videos    one: One video    other: %d videos</span><br><span class="line">&lt;%= __(&apos;index.title&apos;) %&gt;// Home&lt;%= _p(&apos;index.video&apos;, 3) %&gt;// 3 videos</span><br></pre></td></tr></table></figure><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>您可在 front-matter 中指定该页面的语言，也可在 <code>_config.yml</code> 中修改 <code>i18n_dir</code> 设定，让 Hexo 自动侦测。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n_dir: :lang</span><br></pre></td></tr></table></figure><p><code>i18n_dir</code> 的预设值是 <code>:lang</code>，也就是说 Hexo 会捕获网址中的第一段以检测语言，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.html =&gt; en/archives/index.html =&gt; en/zh-tw/index.html =&gt; zh-tw</span><br></pre></td></tr></table></figure><p>捕获到的字符串唯有在语言文件存在的情况下，才会被当作是语言，因此例二 <code>/archives/index.html</code> 中的 <code>archives</code> 就不被当成是语言。</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码。在 Hexo 中有两种形式的插件：</p><h3 id="脚本（Scripts）"><a href="#脚本（Scripts）" class="headerlink" title="脚本（Scripts）"></a>脚本（Scripts）</h3><p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动载入。</p><h3 id="插件（Packages）"><a href="#插件（Packages）" class="headerlink" title="插件（Packages）"></a>插件（Packages）</h3><p>如果您的代码较复杂，或是您想要发布到 NPM 上，建议您编写插件。首先，在 <code>node_modules</code> 文件夹中建立文件夹，文件夹名称开头必须为 <code>hexo-</code>，如此一来 Hexo 才会在启动时载入否则 Hexo 将会忽略它。</p><p>文件夹内至少要包含 2 个文件：一个是主程序，另一个是 <code>package.json</code>，描述插件的用途和所依赖的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.├── index.js└── package.json</span><br></pre></td></tr></table></figure><p><code>package.json</code> 中至少要包含 <code>name</code>, <code>version</code>, <code>main</code> 属性，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;  &quot;name&quot;: &quot;hexo-my-plugin&quot;,  &quot;version&quot;: &quot;0.0.1&quot;,  &quot;main&quot;: &quot;index&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>您可以使用 Hexo 提供的官方工具插件来加速开发：</p><ul><li><a href="https://github.com/hexojs/hexo-fs" target="_blank" rel="noopener">hexo-fs</a>：文件 IO</li><li><a href="https://github.com/hexojs/hexo-util" target="_blank" rel="noopener">hexo-util</a>：工具程式</li><li><a href="https://github.com/hexojs/hexo-i18n" target="_blank" rel="noopener">hexo-i18n</a>：本地化（i18n）</li><li><a href="https://github.com/hexojs/hexo-pagination" target="_blank" rel="noopener">hexo-pagination</a>：生成分页资料</li></ul><h3 id="发布-1"><a href="#发布-1" class="headerlink" title="发布"></a>发布</h3><p>当您完成插件后，可以考虑将它发布到 <a href="https://hexo.io/plugins" target="_blank" rel="noopener">插件列表</a>，让更多人能够使用您的插件。发布插件的步骤和 <a href="https://hexo.io/zh-cn/docs/contributing.html#更新文件" target="_blank" rel="noopener">更新文件</a>非常类似。</p><ol><li><p>Fork <a href="https://github.com/hexojs/site" target="_blank" rel="noopener">hexojs/site</a></p></li><li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/&lt;username&gt;/site.git$ cd site$ npm install</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>source/_data/plugins.yml</code>，在档案中新增您的插件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- name: hexo-server  description: Server module for Hexo.  link: https://github.com/hexojs/hexo-server  tags:    - official    - server    - console</span><br></pre></td></tr></table></figure></li><li><p>推送（push）分支。</p></li><li><p>建立一个新的合并申请（pull request）并描述改动。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Hexo" scheme="https://onehuang.github.io/categories/Hexo/"/>
    
    
      <category term="手册" scheme="https://onehuang.github.io/tags/%E6%89%8B%E5%86%8C/"/>
    
      <category term="文档" scheme="https://onehuang.github.io/tags/%E6%96%87%E6%A1%A3/"/>
    
      <category term="Hexo" scheme="https://onehuang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>java函数式接口编程</title>
    <link href="https://onehuang.github.io/2019/07/31/java/2019-07-31-java%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/"/>
    <id>https://onehuang.github.io/2019/07/31/java/2019-07-31-java函数式接口编程/</id>
    <published>2019-07-31T02:11:01.000Z</published>
    <updated>2020-05-18T10:03:46.654Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><ol><li><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StringProcessor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="function">String <span class="title">process</span><span class="params">(String x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Lambda 表达式</p><ol><li><p>lambda用来表达语句，java8之后支持lambda编程支持，基础语法：</p><p><code>lambda_argument_list -&gt; lambda_body</code></p></li></ol></li><li><p>Predicates</p><ol><li><p>The java.util.function Package</p><p>在java8中加入 <code>java.util.function</code>包，主要是基础下面四个模式：</p><table><thead><tr><th align="center">模式</th><th align="center">参数</th><th align="center">返回值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">Predicate</td><td align="center">是</td><td align="center">Boolean</td><td align="left">测试参数并且返回true 或 false</td></tr><tr><td align="center">Function</td><td align="center">是</td><td align="center">是</td><td align="left">映射一个类型到其他类型</td></tr><tr><td align="center">Consumer</td><td align="center">是</td><td align="center">否</td><td align="left">消费输入，没有返回值信息</td></tr><tr><td align="center">Supplier</td><td align="center">否</td><td align="center">是</td><td align="left">产生数据，没有输入信息</td></tr></tbody></table></li><li><p>Predicate 接口</p><p>Predicate函数接口的函数式方法叫做test，接受一个泛型的条件，返回true或者fasle。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"> <span class="comment">// some static and default methods</span></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个整形类型的Predicate:</p><p><code>Predicate&lt;Integer&gt; p1;</code></p><p>p1的test方法将访问一个整形的参数，并且如果是true则返回true，否则返回false。</p><p>例如，p1被用来检查一个整数是否比7大，使用一个lambda表达是的条件：</p><p><code>p1 = x -&gt; x &gt; 7</code></p><p>可以这样使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( p1.test(<span class="number">9</span>))</span><br><span class="line"> System.out.println(<span class="string">"Predicate x &gt; 7 is true for x==9."</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="3"><li><p>Predicate作为方法的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PredicateMethods</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">result</span><span class="params">((Predicate&lt;X&gt; p, X arg)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (p.test(arg))</span><br><span class="line">     System.out.println(<span class="string">"The Predicate is true for "</span> + arg);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     System.out.println(<span class="string">"The Predicate is false for "</span> + arg);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     Predicate&lt;Integer&gt; p1 = x -&gt; x &gt; <span class="number">2</span>;</span><br><span class="line">     Predicate&lt;String&gt; p2 = s -&gt; s.charAt(<span class="number">0</span>) == <span class="string">'H'</span>;</span><br><span class="line">     result(p1, <span class="number">6</span>);</span><br><span class="line">     result(p2, <span class="string">"Hello"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数接口链式调用</p></li><li></li></ol><ol start="4"><li><p>Functions</p></li><li><p>Operators</p></li><li><p>Consumers</p></li><li><p>Suppliers</p></li><li><p>Use in Traversing Objects</p></li><li><p>Use in Collections</p></li><li><p>Use in Comparing Objects</p></li><li><p>Use in Optionals</p></li><li><p>Use in Streams</p></li><li><p>Use in Multithreaded Programs</p></li><li><p>Use in Atomic Calculations</p></li><li><p>Use in JavaFX Applications</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h1 id=&quot;函数式接口&quot;&gt;&lt;a href=&quot;#函数式接口&quot; class=&quot;headerlink&quot; title=&quot;函数式接口&quot;&gt;&lt;/a&gt;函数式接口&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="java" scheme="https://onehuang.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://onehuang.github.io/tags/java/"/>
    
      <category term="funcational" scheme="https://onehuang.github.io/tags/funcational/"/>
    
      <category term="interface" scheme="https://onehuang.github.io/tags/interface/"/>
    
  </entry>
  
  <entry>
    <title>2019-07-26-ubuntu常见问题</title>
    <link href="https://onehuang.github.io/2019/07/26/linux/2019-07-26-ubuntu%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://onehuang.github.io/2019/07/26/linux/2019-07-26-ubuntu常见问题/</id>
    <published>2019-07-26T07:31:29.000Z</published>
    <updated>2020-05-18T10:03:46.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h1><ol><li><h2 id="添加桌面快捷方式"><a href="#添加桌面快捷方式" class="headerlink" title="添加桌面快捷方式"></a>添加桌面快捷方式</h2><p>(1) 在/usr/share/applications 目录下，新建以软件名称命名的文件idea-ic.desktop</p><p>(2) 例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=1.0</span><br><span class="line">Name=IDEA COMMUNITY IDE</span><br><span class="line">GenericName=IDEA COMMUNITY IDE</span><br><span class="line">Comment=Intellij IDEA community version</span><br><span class="line">Exec=<span class="string">"/usr/local/idea-IC/bin/idea.sh"</span> %f</span><br><span class="line">Icon=/usr/<span class="built_in">local</span>/idea-IC/bin/idea.svg</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Development;IDE</span><br><span class="line">StartupWMClass=jetbrains-idea-ce</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><h2 id="启动栏中重复图标"><a href="#启动栏中重复图标" class="headerlink" title="启动栏中重复图标"></a>启动栏中重复图标</h2><ol><li><p>将StartupWMClass字符串添加到.desktop文件中。使用<code>xprop</code>命令获取此类。例如 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xprop|grep WM_CLASS</span><br><span class="line">WM_CLASS(STRING) = <span class="string">"jetbrains-idea-ce"</span>, <span class="string">"jetbrains-idea-ce"</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>鼠标编程+时，在该应用中点击。</p></li><li><p>将 <code>StartupWMClass=jetbrains-idea-ce</code>添加到 idea-ic.desktop。</p></li></ol></li></ol><ol start="3"><li><h2 id="Chrome安装插件"><a href="#Chrome安装插件" class="headerlink" title="Chrome安装插件"></a>Chrome安装插件</h2><p>AXURE RP EXTENSION FOR CHROME 插件为例：</p><p><code>原型/resources/chrome/axure-chrome-extension.crx</code></p><p>修改 <code>axure-chrome-extension.crx</code>为<code>axure-chrome-extension.rar</code>然后解压。chrome浏览器输入<code>chrome://extensions/</code>，选择<code>加载已解压的扩展程序</code>。</p></li><li><p>安装Windows软件</p><p>deepin-wine-ubuntu</p></li><li><p>wine安装windows软件</p></li></ol><ol start="6"><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见问题：&quot;&gt;&lt;a href=&quot;#常见问题：&quot; class=&quot;headerlink&quot; title=&quot;常见问题：&quot;&gt;&lt;/a&gt;常见问题：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;添加桌面快捷方式&quot;&gt;&lt;a href=&quot;#添加桌面快捷方式&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="ubuntu" scheme="https://onehuang.github.io/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="https://onehuang.github.io/tags/ubuntu/"/>
    
      <category term="常见问题" scheme="https://onehuang.github.io/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu网络访问慢问题排查</title>
    <link href="https://onehuang.github.io/2019/07/24/linux/2019-07-24-ubuntu%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE%E6%85%A2%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://onehuang.github.io/2019/07/24/linux/2019-07-24-ubuntu网络访问慢问题排查/</id>
    <published>2019-07-24T10:05:39.000Z</published>
    <updated>2019-07-24T10:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h2 id="问提描述"><a href="#问提描述" class="headerlink" title="问提描述"></a>问提描述</h2><p>ubuntu 版本： Ubuntu 18.04.2 LTS</p><p>CUP： Intel® Core™ i5-3470 CPU @ 3.20GHz × 4</p><p>图形:    Intel® Ivybridge Desktop</p><p>GNOME: 3.28.2</p><p>操作系统： 64位</p></li></ol><p>​    最近发现Ubuntu系统访问外放奇慢，其他人的电脑刚问挺快？</p><ol start="2"><li><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2></li></ol><p>找到了百度知道上火狐关于此问题的<a href="https://zhidao.baidu.com/question/163233378.html" target="_blank" rel="noopener">官方回答</a>，根据此办法进行解决。此方法相对来说较为简洁。</p><p>DNS没有采用114.114.114.114，而是用了<a href="https://jingyan.baidu.com/article/a3a3f811d00f348da3eb8a6f.html" target="_blank" rel="noopener">这里</a>推荐的第一个DNS服务器。</p><p>执行<code>sudo chattr +i /etc/resolv.conf</code>命令时提醒我文件正在使用中不能锁定。忽略此步骤。再次打开网页发现浏览速度恢复正常，ping网站的速度明显提高。可以判定原来的问题是由DNS解析过慢导致。</p><ul><li><p>现在的/etc/resolv.conf文件内容：</p><p><img src="https://i.loli.net/2019/07/24/5d382c6abd27d82456.png" alt="截图"></p></li></ul><ol start="3"><li><h1 id="永久配置DNS"><a href="#永久配置DNS" class="headerlink" title="永久配置DNS"></a>永久配置DNS</h1><p>检查/etc/resolv.conf，发现之前修改的nameserver总是会被修改为127.0.0.53，无论是改成啥，过段时间，总会变回来。</p><p>查看/etc/resolv.conf这个文件的注释，发现开头就写着这么一行：</p><p><code># This file is managed by man:systemd-resolved(8). Do not edit.</code></p><p>这说明这个文件是被<code>systemd-resolved</code>这个服务托管的。</p><p>通过<code>netstat -tnpl| grep systemd-resolved</code>查看到这个服务是监听在53号端口上。</p><p>查一下，这个服务的配置文件为<code>/etc/systemd/resolved.conf</code>，大致内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  This file is part of systemd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment">#  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">#  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="comment">#  (at your option) any later version.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Entries in this file show the compile time defaults.</span></span><br><span class="line"><span class="comment"># You can change settings by editing this file.</span></span><br><span class="line"><span class="comment"># Defaults can be restored by simply deleting this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See resolved.conf(5) for details</span></span><br><span class="line">[Resolve]</span><br><span class="line">DNS=10.2.3.20 10.0.3.20</span><br><span class="line"><span class="comment">#FallbackDNS=</span></span><br><span class="line"><span class="comment">#Domains=</span></span><br><span class="line"><span class="comment">#LLMNR=no</span></span><br><span class="line"><span class="comment">#MulticastDNS=no</span></span><br><span class="line"><span class="comment">#DNSSEC=no</span></span><br><span class="line"><span class="comment">#Cache=yes</span></span><br><span class="line"><span class="comment">#DNSStubListener=yes</span></span><br></pre></td></tr></table></figure></li></ol><p>   如果我们要想让<code>/etc/resolve.conf</code>文件里的配置生效，需要添加到systemd-resolved的这个配置文件里<code>DNS</code>配置项（如上面的示例，已经完成修改），然后重启systemd-resolved服务即可。</p><p>   另一种更简单的办法是，我们直接停掉systemd-resolved服务，这样再修改<code>/etc/resolve.conf</code>就可以一直生效了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;问提描述&quot;&gt;&lt;a href=&quot;#问提描述&quot; class=&quot;headerlink&quot; title=&quot;问提描述&quot;&gt;&lt;/a&gt;问提描述&lt;/h2&gt;&lt;p&gt;ubuntu 版本： Ubuntu 18.04.2 LTS&lt;/p&gt;
&lt;p&gt;CUP： Intel® Core
      
    
    </summary>
    
      <category term="ubuntu" scheme="https://onehuang.github.io/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="https://onehuang.github.io/tags/ubuntu/"/>
    
      <category term="network" scheme="https://onehuang.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>常用网站总结</title>
    <link href="https://onehuang.github.io/2019/07/20/2019-07-20-%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>https://onehuang.github.io/2019/07/20/2019-07-20-常用网站总结/</id>
    <published>2019-07-20T06:32:47.000Z</published>
    <updated>2019-09-18T01:41:58.194Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h1 id="图片上传社区"><a href="#图片上传社区" class="headerlink" title="图片上传社区"></a>图片上传社区</h1><ol><li><a href="https://sm.ms/" target="_blank" rel="noopener">https://sm.ms/</a></li><li>小图标 <a href="https://www.easyicon.net/" target="_blank" rel="noopener">https://www.easyicon.net</a></li></ol></li><li><h1 id="免费图片素材网站"><a href="#免费图片素材网站" class="headerlink" title="免费图片素材网站"></a>免费图片素材网站</h1><ol><li><a href="http://www.unsplash.com" target="_blank" rel="noopener"><strong>Unsplash</strong></a>  是超全的免费高质量照片的网站，每天更新一张高质量的图片素材，全是生活中的景象作品，非常值得收藏。</li><li><a href="http://www.pexels.com/" target="_blank" rel="noopener"><strong>Pexels</strong></a>  作为图片素材界的超级网红，每周都会定量更新，提供强大的筛选功能，可以按搜索热度，或按颜色等来筛选图片；可以下载各种各样的分辨率，包括原图尺寸。</li><li><a href="http://pixabay.com/" target="_blank" rel="noopener"><strong>Pixabay</strong></a>   是一个支持中文搜索的免费可商用图库。里面有很多不同类型的摄影照片，完美解决各种场合的分辨率要求，真的是一个图片搜索神器。</li><li><a href="http://gratisography.com/" target="_blank" rel="noopener"><strong>Gratisography</strong></a>  是一个免费高分辨率摄影图片库，所有的图片都可以用于个人或者商业用途，每周更新图片你只需要点击即可下载。</li><li><a href="**https://visualhunt.com/**">*<em>VisualHunt *</em></a> 收录着大量免费图片，号称超过三亿张！关键是它可以通过颜色来查找图片，无须注册、登入，即可在线下载图片。</li><li><a href="http://finda.photo" target="_blank" rel="noopener"><strong>FindA.Photo</strong></a></li><li><a href="http://cupcake.nilssonlee.se/" target="_blank" rel="noopener"><strong>Cupcake</strong></a> 是一个提供免费高清摄影图片素材的站点，图片比较适合作为背景。你可以自由的使用所有的图片，无需支付任何费用。</li><li><a href="https://www.photock.jp/" target="_blank" rel="noopener"><strong>Photock</strong></a>日本的无版权图片网站，免费图片资源达5000+，种类有很多，天空、水、河、海、草坪、火、山、动物、建筑、夜景、日本景点、日本历史文化图片等等。</li><li><a href="http://pngimg.com/" target="_blank" rel="noopener"><strong>pngimg</strong></a>这个主要用作素材，20000多张不同种类的无背景素材图片，直接可以免费用。注意它是全部都是无背景图片，非常适合那些需要png透明底配图的。而且它分类也很细，找起来方便。</li><li><a href="http://www.designerspics.com" target="_blank" rel="noopener"><strong>DesignersPics</strong></a>主要是有大量免费高分辨率的生活、工作、休闲图片，关键的是可商业用途。<br><a href="http://kaboompics.com/" target="_blank" rel="noopener"><strong>kaboompics</strong></a> 以生活化免费高质量图片素材为主。所有的图片都可以应用于任何项目，没有版权限制。</li><li><a href="http://www.freemagebank.com" target="_blank" rel="noopener"><strong>freemagebank</strong></a>是一个分享高分辨率图片素材网站，所有的图片均支持个人和商业用途，主要是日常生活图片。</li><li><a href="https://stocksnap.io/" target="_blank" rel="noopener"><strong>StockSnap</strong></a>是一个提供可自由下载使用的高清晰摄影图片素材库，网站由多位摄影师组成，提供丰富的免费照片，随意使用无需授权。</li><li><a href="http://picjumbo.com/" target="_blank" rel="noopener"><strong>Picjumbo</strong></a>网站上的图像资源很棒，没有版权限制，并可免费供个人和商业使用。不仅有图片，还有各式插画、矢量画。照片质量很不错，非常适合用在界面设计或其它项目上。</li><li><a href="http://stokpic.com/" target="_blank" rel="noopener"><strong>STOKPIC</strong></a>这个网站主要是生活方式、旅行、物品、自然等方面的免费图片素材，每两周更新 10 张，量少质精。</li><li><a href="http://cn.freeimages.com" target="_blank" rel="noopener"><strong>freeimages</strong></a>是一款免费的、开源的、跨平台图像处理库。其中包括了超过 389973 张免费照片和图片，分类很清晰。</li><li><a href="http://www.imcreator.com/free" target="_blank" rel="noopener"><strong>IM FREE</strong></a>也是一个无版权限制的可商用网站，图片分类详细，可按分类进行筛选，有人物、自然、艺术、生活、图标等分类。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h1 id=&quot;图片上传社区&quot;&gt;&lt;a href=&quot;#图片上传社区&quot; class=&quot;headerlink&quot; title=&quot;图片上传社区&quot;&gt;&lt;/a&gt;图片上传社区&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sm.ms/&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="tools" scheme="https://onehuang.github.io/categories/tools/"/>
    
    
      <category term="tool" scheme="https://onehuang.github.io/tags/tool/"/>
    
      <category term="网站" scheme="https://onehuang.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>java-hexo-theme-butterfly使用</title>
    <link href="https://onehuang.github.io/2019/07/14/2019-07-14-java-hexo-theme-butterfly%E4%BD%BF%E7%94%A8/"/>
    <id>https://onehuang.github.io/2019/07/14/2019-07-14-java-hexo-theme-butterfly使用/</id>
    <published>2019-07-14T12:21:11.000Z</published>
    <updated>2019-09-18T01:41:58.194Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="hexo" scheme="https://onehuang.github.io/categories/hexo/"/>
    
      <category term="theme" scheme="https://onehuang.github.io/categories/hexo/theme/"/>
    
    
      <category term="Theme" scheme="https://onehuang.github.io/tags/Theme/"/>
    
      <category term="主题" scheme="https://onehuang.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="hexo" scheme="https://onehuang.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
